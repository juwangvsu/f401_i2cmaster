
f401_i2cmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004174  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004314  08004314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004394  08004394  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800439c  0800439c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800439c  0800439c  0001439c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043a0  080043a0  000143a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080043a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  200000a4  08004448  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08004448  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bab1  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f7  00000000  00000000  0002bb85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002d480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002de20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162f5  00000000  00000000  0002e740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c37a  00000000  00000000  00044a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088167  00000000  00000000  00050daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8f16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bec  00000000  00000000  000d8f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080042fc 	.word	0x080042fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	080042fc 	.word	0x080042fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ina260_new>:
  * @param    i2c_hal - pointer to configured HAL I2C device handle
  *
  * @return   pointer to newly allocated ina260_t struct
  */
ina260_t *ina260_new(I2C_HandleTypeDef *i2c_hal, uint8_t i2c_slave_addr)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b087      	sub	sp, #28
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	460b      	mov	r3, r1
 800058e:	70fb      	strb	r3, [r7, #3]
  ina260_t *pow = NULL;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]

  if ((NULL != i2c_hal) && (i2c_slave_addr < 0x80)/* 7-bit */) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d025      	beq.n	80005e6 <ina260_new+0x62>
 800059a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	db21      	blt.n	80005e6 <ina260_new+0x62>

    if (NULL != (pow = malloc(sizeof(ina260_t)))) {
 80005a2:	200c      	movs	r0, #12
 80005a4:	f003 fa24 	bl	80039f0 <malloc>
 80005a8:	4603      	mov	r3, r0
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d019      	beq.n	80005e6 <ina260_new+0x62>

      pow->i2c_hal        = i2c_hal;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	601a      	str	r2, [r3, #0]
      pow->i2c_slave_addr = i2c_slave_addr;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	78fa      	ldrb	r2, [r7, #3]
 80005bc:	711a      	strb	r2, [r3, #4]

      if (HAL_OK != ina260_set_config(pow,
 80005be:	2103      	movs	r1, #3
 80005c0:	2001      	movs	r0, #1
 80005c2:	2404      	movs	r4, #4
 80005c4:	2304      	movs	r3, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	9201      	str	r2, [sp, #4]
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	4623      	mov	r3, r4
 80005ce:	4602      	mov	r2, r0
 80005d0:	68f8      	ldr	r0, [r7, #12]
 80005d2:	f000 f866 	bl	80006a2 <ina260_set_config>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d004      	beq.n	80005e6 <ina260_new+0x62>
          DEFAULT_OPERATING_TYPE, DEFAULT_OPERATING_MODE,
          DEFAULT_CURRENT_CTIME, DEFAULT_VOLTAGE_CTIME, DEFAULT_SAMPLE_SIZE)) {
        free(pow);
 80005dc:	68f8      	ldr	r0, [r7, #12]
 80005de:	f003 fa0f 	bl	8003a00 <free>
        pow = NULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return pow;
 80005e6:	68fb      	ldr	r3, [r7, #12]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd90      	pop	{r4, r7, pc}

080005f0 <ina260_ready>:
  *             HAL_TIMEOUT - I2C communication timeout. see timeout constant
  *                           INA260_I2C_READ_TIMEOUT_MS in ina260.c
  *
  */
ina260_status_t ina260_ready(ina260_t *pow)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  ina260_status_t status;
  ina260_identification_t id;

  if (NULL == pow)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d101      	bne.n	8000602 <ina260_ready+0x12>
    { return HAL_ERROR; }
 80005fe:	2301      	movs	r3, #1
 8000600:	e023      	b.n	800064a <ina260_ready+0x5a>

  status = ina260_i2c_read(pow, INA260_REG_DEV_ID, &(id.u16), 2U);
 8000602:	21ff      	movs	r1, #255	; 0xff
 8000604:	f107 020c 	add.w	r2, r7, #12
 8000608:	2302      	movs	r3, #2
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f8fd 	bl	800080a <ina260_i2c_read>
 8000610:	4603      	mov	r3, r0
 8000612:	73fb      	strb	r3, [r7, #15]
  if (HAL_OK != status)
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <ina260_ready+0x2e>
    { return status; }
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	e015      	b.n	800064a <ina260_ready+0x5a>

  // INA260 returns MSB first
  id.u16 = __LEu16(&(id.u16));
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	3301      	adds	r3, #1
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	b21a      	sxth	r2, r3
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	021b      	lsls	r3, r3, #8
 8000630:	b21b      	sxth	r3, r3
 8000632:	4313      	orrs	r3, r2
 8000634:	b21b      	sxth	r3, r3
 8000636:	b29b      	uxth	r3, r3
 8000638:	81bb      	strh	r3, [r7, #12]

  if (INA260_DEVICE_ID.u16 != id.u16)
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <ina260_ready+0x64>)
 800063c:	881a      	ldrh	r2, [r3, #0]
 800063e:	89bb      	ldrh	r3, [r7, #12]
 8000640:	429a      	cmp	r2, r3
 8000642:	d001      	beq.n	8000648 <ina260_ready+0x58>
    { return HAL_ERROR; }
 8000644:	2301      	movs	r3, #1
 8000646:	e000      	b.n	800064a <ina260_ready+0x5a>

  return HAL_OK;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	08004344 	.word	0x08004344

08000658 <ina260_wait_until_ready>:
  *             HAL_BUSY    - I2C bus busy
  *             HAL_TIMEOUT - I2C communication timeout or failed to obtain the
  *                           expected device ID within given timeout period.
  */
ina260_status_t ina260_wait_until_ready(ina260_t *pow, uint32_t timeout)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
  uint32_t start = HAL_GetTick();
 8000662:	f000 fd9f 	bl	80011a4 <HAL_GetTick>
 8000666:	60f8      	str	r0, [r7, #12]

  while (HAL_OK != ina260_ready(pow)) {
 8000668:	e010      	b.n	800068c <ina260_wait_until_ready+0x34>
    if (HAL_MAX_DELAY != timeout) {
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000670:	d00c      	beq.n	800068c <ina260_wait_until_ready+0x34>
      if (((HAL_GetTick() - start) > timeout) || (0U == timeout)) {
 8000672:	f000 fd97 	bl	80011a4 <HAL_GetTick>
 8000676:	4602      	mov	r2, r0
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	429a      	cmp	r2, r3
 8000680:	d302      	bcc.n	8000688 <ina260_wait_until_ready+0x30>
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d101      	bne.n	800068c <ina260_wait_until_ready+0x34>
        return HAL_TIMEOUT;
 8000688:	2303      	movs	r3, #3
 800068a:	e006      	b.n	800069a <ina260_wait_until_ready+0x42>
  while (HAL_OK != ina260_ready(pow)) {
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff ffaf 	bl	80005f0 <ina260_ready>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1e8      	bne.n	800066a <ina260_wait_until_ready+0x12>
      }
    }
  }
  return HAL_OK;
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <ina260_set_config>:
    ina260_operating_type_t  operating_type,
    ina260_operating_mode_t  operating_mode,
    ina260_conversion_time_t current_ctime,
    ina260_conversion_time_t voltage_ctime,
    ina260_sample_size_t     sample_size)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
 80006aa:	4608      	mov	r0, r1
 80006ac:	4611      	mov	r1, r2
 80006ae:	461a      	mov	r2, r3
 80006b0:	4603      	mov	r3, r0
 80006b2:	70fb      	strb	r3, [r7, #3]
 80006b4:	460b      	mov	r3, r1
 80006b6:	70bb      	strb	r3, [r7, #2]
 80006b8:	4613      	mov	r3, r2
 80006ba:	707b      	strb	r3, [r7, #1]
  if (NULL == pow)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d101      	bne.n	80006c6 <ina260_set_config+0x24>
    { return HAL_ERROR; }
 80006c2:	2301      	movs	r3, #1
 80006c4:	e030      	b.n	8000728 <ina260_set_config+0x86>

  pow->config.type  = operating_type;
 80006c6:	78fb      	ldrb	r3, [r7, #3]
 80006c8:	f003 0303 	and.w	r3, r3, #3
 80006cc:	b2d9      	uxtb	r1, r3
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	7993      	ldrb	r3, [r2, #6]
 80006d2:	f361 0301 	bfi	r3, r1, #0, #2
 80006d6:	7193      	strb	r3, [r2, #6]
  pow->config.mode  = operating_mode;
 80006d8:	78bb      	ldrb	r3, [r7, #2]
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	b2d9      	uxtb	r1, r3
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	7993      	ldrb	r3, [r2, #6]
 80006e4:	f361 0382 	bfi	r3, r1, #2, #1
 80006e8:	7193      	strb	r3, [r2, #6]
  pow->config.ctime = current_ctime;
 80006ea:	787b      	ldrb	r3, [r7, #1]
 80006ec:	f003 0307 	and.w	r3, r3, #7
 80006f0:	b2d9      	uxtb	r1, r3
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	7993      	ldrb	r3, [r2, #6]
 80006f6:	f361 03c5 	bfi	r3, r1, #3, #3
 80006fa:	7193      	strb	r3, [r2, #6]
  pow->config.vtime = voltage_ctime;
 80006fc:	7c3b      	ldrb	r3, [r7, #16]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	b2d9      	uxtb	r1, r3
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	79d3      	ldrb	r3, [r2, #7]
 8000708:	f361 0302 	bfi	r3, r1, #0, #3
 800070c:	71d3      	strb	r3, [r2, #7]
  pow->config.ssize = sample_size;
 800070e:	7d3b      	ldrb	r3, [r7, #20]
 8000710:	f003 0307 	and.w	r3, r3, #7
 8000714:	b2d9      	uxtb	r1, r3
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	79d3      	ldrb	r3, [r2, #7]
 800071a:	f361 03c5 	bfi	r3, r1, #3, #3
 800071e:	71d3      	strb	r3, [r2, #7]

  return ina260_write_config(pow);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f8d3 	bl	80008cc <ina260_write_config>
 8000726:	4603      	mov	r3, r0
}
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <ina260_get_voltage>:
  *             HAL_BUSY    - I2C bus busy
  *             HAL_TIMEOUT - I2C communication timeout. see timeout constant
  *                           INA260_I2C_READ_TIMEOUT_MS in ina260.c
  */
ina260_status_t ina260_get_voltage(ina260_t *pow, float *voltage)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
  ina260_status_t status;
  uint16_t v;

  if (NULL == pow)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d101      	bne.n	8000744 <ina260_get_voltage+0x14>
    { return HAL_ERROR; }
 8000740:	2301      	movs	r3, #1
 8000742:	e028      	b.n	8000796 <ina260_get_voltage+0x66>

  if (HAL_OK != (status = ina260_i2c_read(pow, INA260_REG_VOLTAGE, &v, 2U)))
 8000744:	2102      	movs	r1, #2
 8000746:	f107 020c 	add.w	r2, r7, #12
 800074a:	2302      	movs	r3, #2
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f85c 	bl	800080a <ina260_i2c_read>
 8000752:	4603      	mov	r3, r0
 8000754:	73fb      	strb	r3, [r7, #15]
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <ina260_get_voltage+0x30>
    { return status; }
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	e01a      	b.n	8000796 <ina260_get_voltage+0x66>

  v = __LEu16(&v);
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	3301      	adds	r3, #1
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b21a      	sxth	r2, r3
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	021b      	lsls	r3, r3, #8
 8000772:	b21b      	sxth	r3, r3
 8000774:	4313      	orrs	r3, r2
 8000776:	b21b      	sxth	r3, r3
 8000778:	b29b      	uxth	r3, r3
 800077a:	81bb      	strh	r3, [r7, #12]
  *voltage = (float)v * INA260_LSB_VOLTAGE;
 800077c:	89bb      	ldrh	r3, [r7, #12]
 800077e:	ee07 3a90 	vmov	s15, r3
 8000782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000786:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 800078a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	edc3 7a00 	vstr	s15, [r3]

  return HAL_OK;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <ina260_get_current>:
  *             HAL_BUSY    - I2C bus busy
  *             HAL_TIMEOUT - I2C communication timeout. see timeout constant
  *                           INA260_I2C_READ_TIMEOUT_MS in ina260.c
  */
ina260_status_t ina260_get_current(ina260_t *pow, float *current)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b084      	sub	sp, #16
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	6039      	str	r1, [r7, #0]
  ina260_status_t status;
  uint16_t u;
  int16_t c;

  if (NULL == pow)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d101      	bne.n	80007b2 <ina260_get_current+0x14>
    { return HAL_ERROR; }
 80007ae:	2301      	movs	r3, #1
 80007b0:	e027      	b.n	8000802 <ina260_get_current+0x64>

  if (HAL_OK != (status = ina260_i2c_read(pow, INA260_REG_CURRENT, &u, 2U)))
 80007b2:	2101      	movs	r1, #1
 80007b4:	f107 020a 	add.w	r2, r7, #10
 80007b8:	2302      	movs	r3, #2
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f000 f825 	bl	800080a <ina260_i2c_read>
 80007c0:	4603      	mov	r3, r0
 80007c2:	73fb      	strb	r3, [r7, #15]
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <ina260_get_current+0x30>
    { return status; }
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	e019      	b.n	8000802 <ina260_get_current+0x64>

  c = (int16_t)__LEu16(&u);
 80007ce:	f107 030a 	add.w	r3, r7, #10
 80007d2:	3301      	adds	r3, #1
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b21a      	sxth	r2, r3
 80007d8:	f107 030a 	add.w	r3, r7, #10
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	021b      	lsls	r3, r3, #8
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	81bb      	strh	r3, [r7, #12]
  *current = (float)c * INA260_LSB_CURRENT;
 80007e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007ea:	ee07 3a90 	vmov	s15, r3
 80007ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007f2:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 80007f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	edc3 7a00 	vstr	s15, [r3]

  return HAL_OK;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <ina260_i2c_read>:

// -------------------------------------------------------- private functions --

static ina260_status_t ina260_i2c_read(ina260_t *pow,
    uint8_t mem_addr, uint16_t *buff_dst, uint16_t buff_dst_sz)
{
 800080a:	b590      	push	{r4, r7, lr}
 800080c:	b08b      	sub	sp, #44	; 0x2c
 800080e:	af04      	add	r7, sp, #16
 8000810:	60f8      	str	r0, [r7, #12]
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	461a      	mov	r2, r3
 8000816:	460b      	mov	r3, r1
 8000818:	72fb      	strb	r3, [r7, #11]
 800081a:	4613      	mov	r3, r2
 800081c:	813b      	strh	r3, [r7, #8]
  if (NULL == pow)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d10b      	bne.n	800083c <ina260_i2c_read+0x32>
    { return HAL_ERROR; }
 8000824:	2301      	movs	r3, #1
 8000826:	e023      	b.n	8000870 <ina260_i2c_read+0x66>
      (uint8_t *)buff_dst,
      buff_dst_sz,
      INA260_I2C_READ_TIMEOUT_MS))) {

    // should not happen, unless during IRQ routine
    HAL_I2C_DeInit(pow->i2c_hal);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	f001 f9af 	bl	8001b90 <HAL_I2C_DeInit>
    HAL_I2C_Init(pow->i2c_hal);
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f001 f866 	bl	8001908 <HAL_I2C_Init>
  while (HAL_BUSY == (status = HAL_I2C_Mem_Read(
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	6818      	ldr	r0, [r3, #0]
      (uint16_t)__I2C_SLAVE_READ_ADDR(pow->i2c_slave_addr),
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	791b      	ldrb	r3, [r3, #4]
 8000844:	b29b      	uxth	r3, r3
  while (HAL_BUSY == (status = HAL_I2C_Mem_Read(
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	b299      	uxth	r1, r3
 800084a:	7afb      	ldrb	r3, [r7, #11]
 800084c:	b29a      	uxth	r2, r3
 800084e:	2401      	movs	r4, #1
 8000850:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000854:	9302      	str	r3, [sp, #8]
 8000856:	893b      	ldrh	r3, [r7, #8]
 8000858:	9301      	str	r3, [sp, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	4623      	mov	r3, r4
 8000860:	f001 fac0 	bl	8001de4 <HAL_I2C_Mem_Read>
 8000864:	4603      	mov	r3, r0
 8000866:	75fb      	strb	r3, [r7, #23]
 8000868:	7dfb      	ldrb	r3, [r7, #23]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d0dc      	beq.n	8000828 <ina260_i2c_read+0x1e>
  }

  return status;
 800086e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000870:	4618      	mov	r0, r3
 8000872:	371c      	adds	r7, #28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd90      	pop	{r4, r7, pc}

08000878 <ina260_i2c_write>:

static ina260_status_t ina260_i2c_write(ina260_t *pow,
    uint8_t mem_addr, uint16_t *buff_src, uint16_t buff_src_sz)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b08b      	sub	sp, #44	; 0x2c
 800087c:	af04      	add	r7, sp, #16
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	461a      	mov	r2, r3
 8000884:	460b      	mov	r3, r1
 8000886:	72fb      	strb	r3, [r7, #11]
 8000888:	4613      	mov	r3, r2
 800088a:	813b      	strh	r3, [r7, #8]
  if (NULL == pow)
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d101      	bne.n	8000896 <ina260_i2c_write+0x1e>
    { return HAL_ERROR; }
 8000892:	2301      	movs	r3, #1
 8000894:	e016      	b.n	80008c4 <ina260_i2c_write+0x4c>

  ina260_status_t status;

  status = HAL_I2C_Mem_Write(
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	6818      	ldr	r0, [r3, #0]
      pow->i2c_hal,
      (uint16_t)__I2C_SLAVE_WRITE_ADDR(pow->i2c_slave_addr),
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	791b      	ldrb	r3, [r3, #4]
 800089e:	b29b      	uxth	r3, r3
  status = HAL_I2C_Mem_Write(
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	b299      	uxth	r1, r3
 80008a4:	7afb      	ldrb	r3, [r7, #11]
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	2401      	movs	r4, #1
 80008aa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008ae:	9302      	str	r3, [sp, #8]
 80008b0:	893b      	ldrh	r3, [r7, #8]
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	4623      	mov	r3, r4
 80008ba:	f001 f999 	bl	8001bf0 <HAL_I2C_Mem_Write>
 80008be:	4603      	mov	r3, r0
 80008c0:	75fb      	strb	r3, [r7, #23]
      INA260_I2C_MEM_ADDR_SIZE,
      (uint8_t *)buff_src,
      buff_src_sz,
      INA260_I2C_WRITE_TIMEOUT_MS);

  return status;
 80008c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	371c      	adds	r7, #28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd90      	pop	{r4, r7, pc}

080008cc <ina260_write_config>:

static ina260_status_t ina260_write_config(ina260_t *pow)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if (NULL == pow)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d101      	bne.n	80008de <ina260_write_config+0x12>
    { return HAL_ERROR; }
 80008da:	2301      	movs	r3, #1
 80008dc:	e022      	b.n	8000924 <ina260_write_config+0x58>

  ina260_status_t status = ina260_wait_until_ready(
 80008de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008e2:	4619      	mov	r1, r3
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff feb7 	bl	8000658 <ina260_wait_until_ready>
 80008ea:	4603      	mov	r3, r0
 80008ec:	73fb      	strb	r3, [r7, #15]
      pow, INA260_I2C_READ_TIMEOUT_MS);

  ina260_configuration_t conf;
  conf.u16 = __LEu16(&(pow->config.u16));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3306      	adds	r3, #6
 80008f2:	3301      	adds	r3, #1
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b21a      	sxth	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3306      	adds	r3, #6
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	b21b      	sxth	r3, r3
 8000902:	4313      	orrs	r3, r2
 8000904:	b21b      	sxth	r3, r3
 8000906:	b29b      	uxth	r3, r3
 8000908:	813b      	strh	r3, [r7, #8]

  if (HAL_OK == status) {
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d108      	bne.n	8000922 <ina260_write_config+0x56>
    status = ina260_i2c_write(pow, INA260_REG_CONFIG, &(conf.u16), 2U);
 8000910:	2100      	movs	r1, #0
 8000912:	f107 0208 	add.w	r2, r7, #8
 8000916:	2302      	movs	r3, #2
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ffad 	bl	8000878 <ina260_i2c_write>
 800091e:	4603      	mov	r3, r0
 8000920:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000922:	7bfb      	ldrb	r3, [r7, #15]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b5b0      	push	{r4, r5, r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000932:	f000 fbd1 	bl	80010d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000936:	f000 f89b 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093a:	f000 f987 	bl	8000c4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800093e:	f000 f931 	bl	8000ba4 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000942:	f000 f901 	bl	8000b48 <MX_I2C3_Init>
  MX_USART6_UART_Init();
 8000946:	f000 f957 	bl	8000bf8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_I2C_Master_Transmit(&hi2c3,20,TX_Buffer,1,1000); //Sending in Blocking mode
  HAL_Delay(100);
 800094a:	2064      	movs	r0, #100	; 0x64
 800094c:	f000 fc36 	bl	80011bc <HAL_Delay>
  ina260_t * inasensor = ina260_new(&hi2c3, 0x40);
 8000950:	2140      	movs	r1, #64	; 0x40
 8000952:	483e      	ldr	r0, [pc, #248]	; (8000a4c <main+0x120>)
 8000954:	f7ff fe16 	bl	8000584 <ina260_new>
 8000958:	6078      	str	r0, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 800095a:	2120      	movs	r1, #32
 800095c:	483c      	ldr	r0, [pc, #240]	; (8000a50 <main+0x124>)
 800095e:	f000 ffb8 	bl	80018d2 <HAL_GPIO_TogglePin>
	  ina260_status_t inasenor_status =  ina260_ready(inasensor);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff fe44 	bl	80005f0 <ina260_ready>
 8000968:	4603      	mov	r3, r0
 800096a:	70fb      	strb	r3, [r7, #3]
	  *             HAL_ERROR   - I2C read error or invalid arguments
	  *             HAL_BUSY    - I2C bus busy
	  *             HAL_TIMEOUT - I2C communication timeout. see timeout constant
	  *                           INA260_I2C_READ_TIMEOUT_MS in ina260.c
	  */
	  if (inasenor_status==HAL_OK){
 800096c:	78fb      	ldrb	r3, [r7, #3]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d15a      	bne.n	8000a28 <main+0xfc>
		  memset(rx_buffer_i2c, 0, 50);
 8000972:	2232      	movs	r2, #50	; 0x32
 8000974:	2100      	movs	r1, #0
 8000976:	4837      	ldr	r0, [pc, #220]	; (8000a54 <main+0x128>)
 8000978:	f003 f84a 	bl	8003a10 <memset>
		  inasenor_status = ina260_get_voltage(inasensor, &voltage);
 800097c:	4936      	ldr	r1, [pc, #216]	; (8000a58 <main+0x12c>)
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff fed6 	bl	8000730 <ina260_get_voltage>
 8000984:	4603      	mov	r3, r0
 8000986:	70fb      	strb	r3, [r7, #3]
		  inasenor_status = ina260_get_current(inasensor, &current);
 8000988:	4934      	ldr	r1, [pc, #208]	; (8000a5c <main+0x130>)
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff ff07 	bl	800079e <ina260_get_current>
 8000990:	4603      	mov	r3, r0
 8000992:	70fb      	strb	r3, [r7, #3]

		  if (inasenor_status==HAL_OK){
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d14c      	bne.n	8000a34 <main+0x108>
			  //sprintf(rx_buffer_i2c, "curr %03u mA\n", ((int)current)%1000);
			  sprintf(rx_buffer_i2c, "vol %d.%d V, \ncurr %d.%03d A\n", (int)voltage/1000, (int)voltage%1000,
 800099a:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <main+0x12c>)
 800099c:	edd3 7a00 	vldr	s15, [r3]
 80009a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009a4:	ee17 1a90 	vmov	r1, s15
 80009a8:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <main+0x134>)
 80009aa:	fb83 2301 	smull	r2, r3, r3, r1
 80009ae:	119a      	asrs	r2, r3, #6
 80009b0:	17cb      	asrs	r3, r1, #31
 80009b2:	1ad5      	subs	r5, r2, r3
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <main+0x12c>)
 80009b6:	edd3 7a00 	vldr	s15, [r3]
 80009ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009be:	ee17 3a90 	vmov	r3, s15
 80009c2:	4a27      	ldr	r2, [pc, #156]	; (8000a60 <main+0x134>)
 80009c4:	fb82 1203 	smull	r1, r2, r2, r3
 80009c8:	1191      	asrs	r1, r2, #6
 80009ca:	17da      	asrs	r2, r3, #31
 80009cc:	1a8a      	subs	r2, r1, r2
 80009ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009d2:	fb01 f202 	mul.w	r2, r1, r2
 80009d6:	1a9a      	subs	r2, r3, r2
				  ((int)current)/1000, ((int)current)%1000);
 80009d8:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <main+0x130>)
 80009da:	edd3 7a00 	vldr	s15, [r3]
 80009de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009e2:	ee17 0a90 	vmov	r0, s15
			  sprintf(rx_buffer_i2c, "vol %d.%d V, \ncurr %d.%03d A\n", (int)voltage/1000, (int)voltage%1000,
 80009e6:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <main+0x134>)
 80009e8:	fb83 1300 	smull	r1, r3, r3, r0
 80009ec:	1199      	asrs	r1, r3, #6
 80009ee:	17c3      	asrs	r3, r0, #31
 80009f0:	1ac8      	subs	r0, r1, r3
				  ((int)current)/1000, ((int)current)%1000);
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <main+0x130>)
 80009f4:	edd3 7a00 	vldr	s15, [r3]
 80009f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009fc:	ee17 1a90 	vmov	r1, s15
			  sprintf(rx_buffer_i2c, "vol %d.%d V, \ncurr %d.%03d A\n", (int)voltage/1000, (int)voltage%1000,
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <main+0x134>)
 8000a02:	fb83 4301 	smull	r4, r3, r3, r1
 8000a06:	119c      	asrs	r4, r3, #6
 8000a08:	17cb      	asrs	r3, r1, #31
 8000a0a:	1ae3      	subs	r3, r4, r3
 8000a0c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8000a10:	fb04 f303 	mul.w	r3, r4, r3
 8000a14:	1acb      	subs	r3, r1, r3
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	9000      	str	r0, [sp, #0]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	462a      	mov	r2, r5
 8000a1e:	4911      	ldr	r1, [pc, #68]	; (8000a64 <main+0x138>)
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <main+0x128>)
 8000a22:	f003 f8ed 	bl	8003c00 <siprintf>
 8000a26:	e005      	b.n	8000a34 <main+0x108>
		  }
		  //inasenor_status = ina260_get_voltage(inasensor, &voltage);
	  }
	  else
		  sprintf(rx_buffer_i2c, "i2c error %u .", inasenor_status);
 8000a28:	78fb      	ldrb	r3, [r7, #3]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	490e      	ldr	r1, [pc, #56]	; (8000a68 <main+0x13c>)
 8000a2e:	4809      	ldr	r0, [pc, #36]	; (8000a54 <main+0x128>)
 8000a30:	f003 f8e6 	bl	8003c00 <siprintf>
	  //HAL_I2C_Master_Transmit(&hi2c3,20,TX_Buffer,1,1000); //Sending in Blocking mode
	 // HAL_I2C_Master_Receive(&hi2c3, (0x40<<1), (uint8_t*) rx_buffer_i2c,1,3000);
	  HAL_UART_Transmit(&huart6, rx_buffer_i2c, 50, 1000); //pc6,7 tx/rx
 8000a34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a38:	2232      	movs	r2, #50	; 0x32
 8000a3a:	4906      	ldr	r1, [pc, #24]	; (8000a54 <main+0x128>)
 8000a3c:	480b      	ldr	r0, [pc, #44]	; (8000a6c <main+0x140>)
 8000a3e:	f002 fc38 	bl	80032b2 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8000a42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a46:	f000 fbb9 	bl	80011bc <HAL_Delay>
  {
 8000a4a:	e786      	b.n	800095a <main+0x2e>
 8000a4c:	200000c0 	.word	0x200000c0
 8000a50:	40020000 	.word	0x40020000
 8000a54:	20000000 	.word	0x20000000
 8000a58:	2000019c 	.word	0x2000019c
 8000a5c:	200001a0 	.word	0x200001a0
 8000a60:	10624dd3 	.word	0x10624dd3
 8000a64:	08004314 	.word	0x08004314
 8000a68:	08004334 	.word	0x08004334
 8000a6c:	20000158 	.word	0x20000158

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	; 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	; 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 ffc6 	bl	8003a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <SystemClock_Config+0xd0>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a28      	ldr	r2, [pc, #160]	; (8000b40 <SystemClock_Config+0xd0>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <SystemClock_Config+0xd0>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <SystemClock_Config+0xd4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000abc:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <SystemClock_Config+0xd4>)
 8000abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <SystemClock_Config+0xd4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad8:	2310      	movs	r3, #16
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000adc:	2302      	movs	r3, #2
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ae8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000aec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aee:	2304      	movs	r3, #4
 8000af0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000af2:	2307      	movs	r3, #7
 8000af4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af6:	f107 0320 	add.w	r3, r7, #32
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fef4 	bl	80028e8 <HAL_RCC_OscConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b06:	f000 f90f 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2102      	movs	r1, #2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f002 f956 	bl	8002dd8 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b32:	f000 f8f9 	bl	8000d28 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	; 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_I2C3_Init+0x50>)
 8000b4e:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <MX_I2C3_Init+0x54>)
 8000b50:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_I2C3_Init+0x50>)
 8000b54:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <MX_I2C3_Init+0x58>)
 8000b56:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_I2C3_Init+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_I2C3_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_I2C3_Init+0x50>)
 8000b66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b6a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <MX_I2C3_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_I2C3_Init+0x50>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <MX_I2C3_Init+0x50>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_I2C3_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_I2C3_Init+0x50>)
 8000b86:	f000 febf 	bl	8001908 <HAL_I2C_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b90:	f000 f8ca 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000c0 	.word	0x200000c0
 8000b9c:	40005c00 	.word	0x40005c00
 8000ba0:	000186a0 	.word	0x000186a0

08000ba4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <MX_USART2_UART_Init+0x50>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_USART2_UART_Init+0x4c>)
 8000bdc:	f002 fb1c 	bl	8003218 <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000be6:	f000 f89f 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000114 	.word	0x20000114
 8000bf4:	40004400 	.word	0x40004400

08000bf8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_USART6_UART_Init+0x4c>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <MX_USART6_UART_Init+0x50>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MX_USART6_UART_Init+0x4c>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_USART6_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_USART6_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_USART6_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_USART6_UART_Init+0x4c>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_USART6_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_USART6_UART_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_USART6_UART_Init+0x4c>)
 8000c30:	f002 faf2 	bl	8003218 <HAL_UART_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c3a:	f000 f875 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000158 	.word	0x20000158
 8000c48:	40011400 	.word	0x40011400

08000c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a2c      	ldr	r2, [pc, #176]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a25      	ldr	r2, [pc, #148]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2120      	movs	r1, #32
 8000cd6:	4812      	ldr	r0, [pc, #72]	; (8000d20 <MX_GPIO_Init+0xd4>)
 8000cd8:	f000 fde2 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ce2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480c      	ldr	r0, [pc, #48]	; (8000d24 <MX_GPIO_Init+0xd8>)
 8000cf4:	f000 fb6c 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cf8:	2320      	movs	r3, #32
 8000cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_GPIO_Init+0xd4>)
 8000d10:	f000 fb5e 	bl	80013d0 <HAL_GPIO_Init>

}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	; 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020000 	.word	0x40020000
 8000d24:	40020800 	.word	0x40020800

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <Error_Handler+0x8>
	...

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d72:	2007      	movs	r0, #7
 8000d74:	f000 faf8 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40023800 	.word	0x40023800

08000d84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a29      	ldr	r2, [pc, #164]	; (8000e48 <HAL_I2C_MspInit+0xc4>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d14b      	bne.n	8000e3e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <HAL_I2C_MspInit+0xc8>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a27      	ldr	r2, [pc, #156]	; (8000e4c <HAL_I2C_MspInit+0xc8>)
 8000db0:	f043 0304 	orr.w	r3, r3, #4
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <HAL_I2C_MspInit+0xc8>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <HAL_I2C_MspInit+0xc8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a20      	ldr	r2, [pc, #128]	; (8000e4c <HAL_I2C_MspInit+0xc8>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <HAL_I2C_MspInit+0xc8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de4:	2312      	movs	r3, #18
 8000de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000df0:	2304      	movs	r3, #4
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4815      	ldr	r0, [pc, #84]	; (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000dfc:	f000 fae8 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e06:	2312      	movs	r3, #18
 8000e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e12:	2304      	movs	r3, #4
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <HAL_I2C_MspInit+0xd0>)
 8000e1e:	f000 fad7 	bl	80013d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <HAL_I2C_MspInit+0xc8>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_I2C_MspInit+0xc8>)
 8000e2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_I2C_MspInit+0xc8>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40005c00 	.word	0x40005c00
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40020000 	.word	0x40020000

08000e58 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <HAL_I2C_MspDeInit+0x3c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10f      	bne.n	8000e8a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_I2C_MspDeInit+0x40>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_I2C_MspDeInit+0x40>)
 8000e70:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8000e76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7a:	4808      	ldr	r0, [pc, #32]	; (8000e9c <HAL_I2C_MspDeInit+0x44>)
 8000e7c:	f000 fc2c 	bl	80016d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8000e80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <HAL_I2C_MspDeInit+0x48>)
 8000e86:	f000 fc27 	bl	80016d8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40005c00 	.word	0x40005c00
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020800 	.word	0x40020800
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a32      	ldr	r2, [pc, #200]	; (8000f8c <HAL_UART_MspInit+0xe8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d12c      	bne.n	8000f20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <HAL_UART_MspInit+0xec>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a30      	ldr	r2, [pc, #192]	; (8000f90 <HAL_UART_MspInit+0xec>)
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b2e      	ldr	r3, [pc, #184]	; (8000f90 <HAL_UART_MspInit+0xec>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ede:	61bb      	str	r3, [r7, #24]
 8000ee0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <HAL_UART_MspInit+0xec>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a29      	ldr	r2, [pc, #164]	; (8000f90 <HAL_UART_MspInit+0xec>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <HAL_UART_MspInit+0xec>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000efe:	230c      	movs	r3, #12
 8000f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	481e      	ldr	r0, [pc, #120]	; (8000f94 <HAL_UART_MspInit+0xf0>)
 8000f1a:	f000 fa59 	bl	80013d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000f1e:	e030      	b.n	8000f82 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a1c      	ldr	r2, [pc, #112]	; (8000f98 <HAL_UART_MspInit+0xf4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d12b      	bne.n	8000f82 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <HAL_UART_MspInit+0xec>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <HAL_UART_MspInit+0xec>)
 8000f34:	f043 0320 	orr.w	r3, r3, #32
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_UART_MspInit+0xec>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f003 0320 	and.w	r3, r3, #32
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_UART_MspInit+0xec>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <HAL_UART_MspInit+0xec>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_UART_MspInit+0xec>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f62:	23c0      	movs	r3, #192	; 0xc0
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f72:	2308      	movs	r3, #8
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4807      	ldr	r0, [pc, #28]	; (8000f9c <HAL_UART_MspInit+0xf8>)
 8000f7e:	f000 fa27 	bl	80013d0 <HAL_GPIO_Init>
}
 8000f82:	bf00      	nop
 8000f84:	3730      	adds	r7, #48	; 0x30
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40004400 	.word	0x40004400
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40011400 	.word	0x40011400
 8000f9c:	40020800 	.word	0x40020800

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fec:	f000 f8c6 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <_sbrk+0x5c>)
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <_sbrk+0x60>)
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <_sbrk+0x64>)
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <_sbrk+0x68>)
 8001014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	429a      	cmp	r2, r3
 8001022:	d207      	bcs.n	8001034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001024:	f002 fcba 	bl	800399c <__errno>
 8001028:	4603      	mov	r3, r0
 800102a:	220c      	movs	r2, #12
 800102c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	e009      	b.n	8001048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	4a05      	ldr	r2, [pc, #20]	; (8001058 <_sbrk+0x64>)
 8001044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20018000 	.word	0x20018000
 8001054:	00000400 	.word	0x00000400
 8001058:	200001a4 	.word	0x200001a4
 800105c:	200001c0 	.word	0x200001c0

08001060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <SystemInit+0x20>)
 8001066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <SystemInit+0x20>)
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001088:	480d      	ldr	r0, [pc, #52]	; (80010c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800108a:	490e      	ldr	r1, [pc, #56]	; (80010c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010a0:	4c0b      	ldr	r4, [pc, #44]	; (80010d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ae:	f7ff ffd7 	bl	8001060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b2:	f002 fc79 	bl	80039a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b6:	f7ff fc39 	bl	800092c <main>
  bx  lr    
 80010ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80010c8:	080043a4 	.word	0x080043a4
  ldr r2, =_sbss
 80010cc:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80010d0:	200001bc 	.word	0x200001bc

080010d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC_IRQHandler>
	...

080010d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <HAL_Init+0x40>)
 80010e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_Init+0x40>)
 80010ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_Init+0x40>)
 80010fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001100:	2003      	movs	r0, #3
 8001102:	f000 f931 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001106:	2000      	movs	r0, #0
 8001108:	f000 f808 	bl	800111c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800110c:	f7ff fe12 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023c00 	.word	0x40023c00

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x54>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x58>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	fbb3 f3f1 	udiv	r3, r3, r1
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f93b 	bl	80013b6 <HAL_SYSTICK_Config>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e00e      	b.n	8001168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d80a      	bhi.n	8001166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f000 f911 	bl	800137e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_InitTick+0x5c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	e000      	b.n	8001168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000034 	.word	0x20000034
 8001174:	2000003c 	.word	0x2000003c
 8001178:	20000038 	.word	0x20000038

0800117c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x20>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x24>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <HAL_IncTick+0x24>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2000003c 	.word	0x2000003c
 80011a0:	200001a8 	.word	0x200001a8

080011a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <HAL_GetTick+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	200001a8 	.word	0x200001a8

080011bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff ffee 	bl	80011a4 <HAL_GetTick>
 80011c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_Delay+0x44>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011e2:	bf00      	nop
 80011e4:	f7ff ffde 	bl	80011a4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000003c 	.word	0x2000003c

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	; (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	; 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001334:	d301      	bcc.n	800133a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001336:	2301      	movs	r3, #1
 8001338:	e00f      	b.n	800135a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <SysTick_Config+0x40>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001342:	210f      	movs	r1, #15
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f7ff ff8e 	bl	8001268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <SysTick_Config+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SysTick_Config+0x40>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff47 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff5c 	bl	800124c <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff8e 	bl	80012bc <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5d 	bl	8001268 <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffb0 	bl	8001324 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	e159      	b.n	80016a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	429a      	cmp	r2, r3
 8001406:	f040 8148 	bne.w	800169a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b01      	cmp	r3, #1
 8001414:	d005      	beq.n	8001422 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141e:	2b02      	cmp	r3, #2
 8001420:	d130      	bne.n	8001484 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001458:	2201      	movs	r2, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	f003 0201 	and.w	r2, r3, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b03      	cmp	r3, #3
 800148e:	d017      	beq.n	80014c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d123      	bne.n	8001514 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	08da      	lsrs	r2, r3, #3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3208      	adds	r2, #8
 80014d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	220f      	movs	r2, #15
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	08da      	lsrs	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3208      	adds	r2, #8
 800150e:	69b9      	ldr	r1, [r7, #24]
 8001510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0203 	and.w	r2, r3, #3
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80a2 	beq.w	800169a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b57      	ldr	r3, [pc, #348]	; (80016b8 <HAL_GPIO_Init+0x2e8>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a56      	ldr	r2, [pc, #344]	; (80016b8 <HAL_GPIO_Init+0x2e8>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b54      	ldr	r3, [pc, #336]	; (80016b8 <HAL_GPIO_Init+0x2e8>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001572:	4a52      	ldr	r2, [pc, #328]	; (80016bc <HAL_GPIO_Init+0x2ec>)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a49      	ldr	r2, [pc, #292]	; (80016c0 <HAL_GPIO_Init+0x2f0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d019      	beq.n	80015d2 <HAL_GPIO_Init+0x202>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a48      	ldr	r2, [pc, #288]	; (80016c4 <HAL_GPIO_Init+0x2f4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0x1fe>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a47      	ldr	r2, [pc, #284]	; (80016c8 <HAL_GPIO_Init+0x2f8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00d      	beq.n	80015ca <HAL_GPIO_Init+0x1fa>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a46      	ldr	r2, [pc, #280]	; (80016cc <HAL_GPIO_Init+0x2fc>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d007      	beq.n	80015c6 <HAL_GPIO_Init+0x1f6>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a45      	ldr	r2, [pc, #276]	; (80016d0 <HAL_GPIO_Init+0x300>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_GPIO_Init+0x1f2>
 80015be:	2304      	movs	r3, #4
 80015c0:	e008      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015c2:	2307      	movs	r3, #7
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015c6:	2303      	movs	r3, #3
 80015c8:	e004      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e002      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015d2:	2300      	movs	r3, #0
 80015d4:	69fa      	ldr	r2, [r7, #28]
 80015d6:	f002 0203 	and.w	r2, r2, #3
 80015da:	0092      	lsls	r2, r2, #2
 80015dc:	4093      	lsls	r3, r2
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e4:	4935      	ldr	r1, [pc, #212]	; (80016bc <HAL_GPIO_Init+0x2ec>)
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f2:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <HAL_GPIO_Init+0x304>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001616:	4a2f      	ldr	r2, [pc, #188]	; (80016d4 <HAL_GPIO_Init+0x304>)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800161c:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <HAL_GPIO_Init+0x304>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001640:	4a24      	ldr	r2, [pc, #144]	; (80016d4 <HAL_GPIO_Init+0x304>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001646:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <HAL_GPIO_Init+0x304>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800166a:	4a1a      	ldr	r2, [pc, #104]	; (80016d4 <HAL_GPIO_Init+0x304>)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_GPIO_Init+0x304>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001694:	4a0f      	ldr	r2, [pc, #60]	; (80016d4 <HAL_GPIO_Init+0x304>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3301      	adds	r3, #1
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	2b0f      	cmp	r3, #15
 80016a4:	f67f aea2 	bls.w	80013ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40013800 	.word	0x40013800
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40020400 	.word	0x40020400
 80016c8:	40020800 	.word	0x40020800
 80016cc:	40020c00 	.word	0x40020c00
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40013c00 	.word	0x40013c00

080016d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e0bb      	b.n	800186c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016f4:	2201      	movs	r2, #1
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	429a      	cmp	r2, r3
 800170c:	f040 80ab 	bne.w	8001866 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001710:	4a5c      	ldr	r2, [pc, #368]	; (8001884 <HAL_GPIO_DeInit+0x1ac>)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3302      	adds	r3, #2
 8001718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	220f      	movs	r2, #15
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	4013      	ands	r3, r2
 8001730:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a54      	ldr	r2, [pc, #336]	; (8001888 <HAL_GPIO_DeInit+0x1b0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d019      	beq.n	800176e <HAL_GPIO_DeInit+0x96>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a53      	ldr	r2, [pc, #332]	; (800188c <HAL_GPIO_DeInit+0x1b4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d013      	beq.n	800176a <HAL_GPIO_DeInit+0x92>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a52      	ldr	r2, [pc, #328]	; (8001890 <HAL_GPIO_DeInit+0x1b8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d00d      	beq.n	8001766 <HAL_GPIO_DeInit+0x8e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a51      	ldr	r2, [pc, #324]	; (8001894 <HAL_GPIO_DeInit+0x1bc>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d007      	beq.n	8001762 <HAL_GPIO_DeInit+0x8a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a50      	ldr	r2, [pc, #320]	; (8001898 <HAL_GPIO_DeInit+0x1c0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d101      	bne.n	800175e <HAL_GPIO_DeInit+0x86>
 800175a:	2304      	movs	r3, #4
 800175c:	e008      	b.n	8001770 <HAL_GPIO_DeInit+0x98>
 800175e:	2307      	movs	r3, #7
 8001760:	e006      	b.n	8001770 <HAL_GPIO_DeInit+0x98>
 8001762:	2303      	movs	r3, #3
 8001764:	e004      	b.n	8001770 <HAL_GPIO_DeInit+0x98>
 8001766:	2302      	movs	r3, #2
 8001768:	e002      	b.n	8001770 <HAL_GPIO_DeInit+0x98>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <HAL_GPIO_DeInit+0x98>
 800176e:	2300      	movs	r3, #0
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	f002 0203 	and.w	r2, r2, #3
 8001776:	0092      	lsls	r2, r2, #2
 8001778:	4093      	lsls	r3, r2
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	429a      	cmp	r2, r3
 800177e:	d132      	bne.n	80017e6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001780:	4b46      	ldr	r3, [pc, #280]	; (800189c <HAL_GPIO_DeInit+0x1c4>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	43db      	mvns	r3, r3
 8001788:	4944      	ldr	r1, [pc, #272]	; (800189c <HAL_GPIO_DeInit+0x1c4>)
 800178a:	4013      	ands	r3, r2
 800178c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800178e:	4b43      	ldr	r3, [pc, #268]	; (800189c <HAL_GPIO_DeInit+0x1c4>)
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	43db      	mvns	r3, r3
 8001796:	4941      	ldr	r1, [pc, #260]	; (800189c <HAL_GPIO_DeInit+0x1c4>)
 8001798:	4013      	ands	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800179c:	4b3f      	ldr	r3, [pc, #252]	; (800189c <HAL_GPIO_DeInit+0x1c4>)
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	493d      	ldr	r1, [pc, #244]	; (800189c <HAL_GPIO_DeInit+0x1c4>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80017aa:	4b3c      	ldr	r3, [pc, #240]	; (800189c <HAL_GPIO_DeInit+0x1c4>)
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	493a      	ldr	r1, [pc, #232]	; (800189c <HAL_GPIO_DeInit+0x1c4>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80017c8:	4a2e      	ldr	r2, [pc, #184]	; (8001884 <HAL_GPIO_DeInit+0x1ac>)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	43da      	mvns	r2, r3
 80017d8:	482a      	ldr	r0, [pc, #168]	; (8001884 <HAL_GPIO_DeInit+0x1ac>)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	400a      	ands	r2, r1
 80017e0:	3302      	adds	r3, #2
 80017e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2103      	movs	r1, #3
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	401a      	ands	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	08da      	lsrs	r2, r3, #3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3208      	adds	r2, #8
 8001804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	220f      	movs	r2, #15
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	08d2      	lsrs	r2, r2, #3
 800181c:	4019      	ands	r1, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2103      	movs	r1, #3
 8001830:	fa01 f303 	lsl.w	r3, r1, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	401a      	ands	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	2101      	movs	r1, #1
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	401a      	ands	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2103      	movs	r1, #3
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	401a      	ands	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3301      	adds	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2b0f      	cmp	r3, #15
 8001870:	f67f af40 	bls.w	80016f4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	371c      	adds	r7, #28
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40013800 	.word	0x40013800
 8001888:	40020000 	.word	0x40020000
 800188c:	40020400 	.word	0x40020400
 8001890:	40020800 	.word	0x40020800
 8001894:	40020c00 	.word	0x40020c00
 8001898:	40021000 	.word	0x40021000
 800189c:	40013c00 	.word	0x40013c00

080018a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
 80018ac:	4613      	mov	r3, r2
 80018ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018bc:	e003      	b.n	80018c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	041a      	lsls	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	619a      	str	r2, [r3, #24]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b085      	sub	sp, #20
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018e4:	887a      	ldrh	r2, [r7, #2]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4013      	ands	r3, r2
 80018ea:	041a      	lsls	r2, r3, #16
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	887b      	ldrh	r3, [r7, #2]
 80018f2:	400b      	ands	r3, r1
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	619a      	str	r2, [r3, #24]
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e12b      	b.n	8001b72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d106      	bne.n	8001934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff fa28 	bl	8000d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2224      	movs	r2, #36	; 0x24
 8001938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0201 	bic.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800195a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800196a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800196c:	f001 fc2c 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 8001970:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4a81      	ldr	r2, [pc, #516]	; (8001b7c <HAL_I2C_Init+0x274>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d807      	bhi.n	800198c <HAL_I2C_Init+0x84>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4a80      	ldr	r2, [pc, #512]	; (8001b80 <HAL_I2C_Init+0x278>)
 8001980:	4293      	cmp	r3, r2
 8001982:	bf94      	ite	ls
 8001984:	2301      	movls	r3, #1
 8001986:	2300      	movhi	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	e006      	b.n	800199a <HAL_I2C_Init+0x92>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4a7d      	ldr	r2, [pc, #500]	; (8001b84 <HAL_I2C_Init+0x27c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	bf94      	ite	ls
 8001994:	2301      	movls	r3, #1
 8001996:	2300      	movhi	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e0e7      	b.n	8001b72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4a78      	ldr	r2, [pc, #480]	; (8001b88 <HAL_I2C_Init+0x280>)
 80019a6:	fba2 2303 	umull	r2, r3, r2, r3
 80019aa:	0c9b      	lsrs	r3, r3, #18
 80019ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	430a      	orrs	r2, r1
 80019c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4a6a      	ldr	r2, [pc, #424]	; (8001b7c <HAL_I2C_Init+0x274>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d802      	bhi.n	80019dc <HAL_I2C_Init+0xd4>
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	3301      	adds	r3, #1
 80019da:	e009      	b.n	80019f0 <HAL_I2C_Init+0xe8>
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	4a69      	ldr	r2, [pc, #420]	; (8001b8c <HAL_I2C_Init+0x284>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	099b      	lsrs	r3, r3, #6
 80019ee:	3301      	adds	r3, #1
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	430b      	orrs	r3, r1
 80019f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	495c      	ldr	r1, [pc, #368]	; (8001b7c <HAL_I2C_Init+0x274>)
 8001a0c:	428b      	cmp	r3, r1
 8001a0e:	d819      	bhi.n	8001a44 <HAL_I2C_Init+0x13c>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	1e59      	subs	r1, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a1e:	1c59      	adds	r1, r3, #1
 8001a20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a24:	400b      	ands	r3, r1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00a      	beq.n	8001a40 <HAL_I2C_Init+0x138>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1e59      	subs	r1, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a3e:	e051      	b.n	8001ae4 <HAL_I2C_Init+0x1dc>
 8001a40:	2304      	movs	r3, #4
 8001a42:	e04f      	b.n	8001ae4 <HAL_I2C_Init+0x1dc>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d111      	bne.n	8001a70 <HAL_I2C_Init+0x168>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1e58      	subs	r0, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6859      	ldr	r1, [r3, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	440b      	add	r3, r1
 8001a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a5e:	3301      	adds	r3, #1
 8001a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	e012      	b.n	8001a96 <HAL_I2C_Init+0x18e>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1e58      	subs	r0, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6859      	ldr	r1, [r3, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	0099      	lsls	r1, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a86:	3301      	adds	r3, #1
 8001a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	bf0c      	ite	eq
 8001a90:	2301      	moveq	r3, #1
 8001a92:	2300      	movne	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2C_Init+0x196>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e022      	b.n	8001ae4 <HAL_I2C_Init+0x1dc>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10e      	bne.n	8001ac4 <HAL_I2C_Init+0x1bc>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1e58      	subs	r0, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6859      	ldr	r1, [r3, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	440b      	add	r3, r1
 8001ab4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ac2:	e00f      	b.n	8001ae4 <HAL_I2C_Init+0x1dc>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1e58      	subs	r0, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	0099      	lsls	r1, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ada:	3301      	adds	r3, #1
 8001adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	6809      	ldr	r1, [r1, #0]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69da      	ldr	r2, [r3, #28]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6911      	ldr	r1, [r2, #16]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68d2      	ldr	r2, [r2, #12]
 8001b1e:	4311      	orrs	r1, r2
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	430b      	orrs	r3, r1
 8001b26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	000186a0 	.word	0x000186a0
 8001b80:	001e847f 	.word	0x001e847f
 8001b84:	003d08ff 	.word	0x003d08ff
 8001b88:	431bde83 	.word	0x431bde83
 8001b8c:	10624dd3 	.word	0x10624dd3

08001b90 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e021      	b.n	8001be6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2224      	movs	r2, #36	; 0x24
 8001ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff f94c 	bl	8000e58 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4603      	mov	r3, r0
 8001c00:	817b      	strh	r3, [r7, #10]
 8001c02:	460b      	mov	r3, r1
 8001c04:	813b      	strh	r3, [r7, #8]
 8001c06:	4613      	mov	r3, r2
 8001c08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c0a:	f7ff facb 	bl	80011a4 <HAL_GetTick>
 8001c0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	f040 80d9 	bne.w	8001dd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2319      	movs	r3, #25
 8001c24:	2201      	movs	r2, #1
 8001c26:	496d      	ldr	r1, [pc, #436]	; (8001ddc <HAL_I2C_Mem_Write+0x1ec>)
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 fc7f 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001c34:	2302      	movs	r3, #2
 8001c36:	e0cc      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_I2C_Mem_Write+0x56>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e0c5      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d007      	beq.n	8001c6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2221      	movs	r2, #33	; 0x21
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2240      	movs	r2, #64	; 0x40
 8001c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a3a      	ldr	r2, [r7, #32]
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4a4d      	ldr	r2, [pc, #308]	; (8001de0 <HAL_I2C_Mem_Write+0x1f0>)
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cae:	88f8      	ldrh	r0, [r7, #6]
 8001cb0:	893a      	ldrh	r2, [r7, #8]
 8001cb2:	8979      	ldrh	r1, [r7, #10]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 fab6 	bl	8002230 <I2C_RequestMemoryWrite>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d052      	beq.n	8001d70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e081      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 fd00 	bl	80026d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00d      	beq.n	8001cfa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d107      	bne.n	8001cf6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e06b      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	781a      	ldrb	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d11b      	bne.n	8001d70 <HAL_I2C_Mem_Write+0x180>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d017      	beq.n	8001d70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1aa      	bne.n	8001cce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 fcec 	bl	800275a <I2C_WaitOnBTFFlagUntilTimeout>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00d      	beq.n	8001da4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d107      	bne.n	8001da0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e016      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e000      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001dd0:	2302      	movs	r3, #2
  }
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	00100002 	.word	0x00100002
 8001de0:	ffff0000 	.word	0xffff0000

08001de4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08c      	sub	sp, #48	; 0x30
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	4608      	mov	r0, r1
 8001dee:	4611      	mov	r1, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	4603      	mov	r3, r0
 8001df4:	817b      	strh	r3, [r7, #10]
 8001df6:	460b      	mov	r3, r1
 8001df8:	813b      	strh	r3, [r7, #8]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dfe:	f7ff f9d1 	bl	80011a4 <HAL_GetTick>
 8001e02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	f040 8208 	bne.w	8002222 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2319      	movs	r3, #25
 8001e18:	2201      	movs	r2, #1
 8001e1a:	497b      	ldr	r1, [pc, #492]	; (8002008 <HAL_I2C_Mem_Read+0x224>)
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 fb85 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e1fb      	b.n	8002224 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_I2C_Mem_Read+0x56>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e1f4      	b.n	8002224 <HAL_I2C_Mem_Read+0x440>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d007      	beq.n	8001e60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2222      	movs	r2, #34	; 0x22
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2240      	movs	r2, #64	; 0x40
 8001e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001e90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4a5b      	ldr	r2, [pc, #364]	; (800200c <HAL_I2C_Mem_Read+0x228>)
 8001ea0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ea2:	88f8      	ldrh	r0, [r7, #6]
 8001ea4:	893a      	ldrh	r2, [r7, #8]
 8001ea6:	8979      	ldrh	r1, [r7, #10]
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 fa52 	bl	800235c <I2C_RequestMemoryRead>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e1b0      	b.n	8002224 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d113      	bne.n	8001ef2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	623b      	str	r3, [r7, #32]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	623b      	str	r3, [r7, #32]
 8001ede:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	e184      	b.n	80021fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d11b      	bne.n	8001f32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	e164      	b.n	80021fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d11b      	bne.n	8001f72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	e144      	b.n	80021fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f88:	e138      	b.n	80021fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	f200 80f1 	bhi.w	8002176 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d123      	bne.n	8001fe4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 fc1b 	bl	80027dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e139      	b.n	8002224 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691a      	ldr	r2, [r3, #16]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fe2:	e10b      	b.n	80021fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d14e      	bne.n	800208a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	4906      	ldr	r1, [pc, #24]	; (8002010 <HAL_I2C_Mem_Read+0x22c>)
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 fa98 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d008      	beq.n	8002014 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e10e      	b.n	8002224 <HAL_I2C_Mem_Read+0x440>
 8002006:	bf00      	nop
 8002008:	00100002 	.word	0x00100002
 800200c:	ffff0000 	.word	0xffff0000
 8002010:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691a      	ldr	r2, [r3, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207e:	b29b      	uxth	r3, r3
 8002080:	3b01      	subs	r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002088:	e0b8      	b.n	80021fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002090:	2200      	movs	r2, #0
 8002092:	4966      	ldr	r1, [pc, #408]	; (800222c <HAL_I2C_Mem_Read+0x448>)
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 fa49 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0bf      	b.n	8002224 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ec:	2200      	movs	r2, #0
 80020ee:	494f      	ldr	r1, [pc, #316]	; (800222c <HAL_I2C_Mem_Read+0x448>)
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 fa1b 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e091      	b.n	8002224 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002174:	e042      	b.n	80021fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002178:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 fb2e 	bl	80027dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e04c      	b.n	8002224 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d118      	bne.n	80021fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	f47f aec2 	bne.w	8001f8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	e000      	b.n	8002224 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002222:	2302      	movs	r3, #2
  }
}
 8002224:	4618      	mov	r0, r3
 8002226:	3728      	adds	r7, #40	; 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	00010004 	.word	0x00010004

08002230 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af02      	add	r7, sp, #8
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	4608      	mov	r0, r1
 800223a:	4611      	mov	r1, r2
 800223c:	461a      	mov	r2, r3
 800223e:	4603      	mov	r3, r0
 8002240:	817b      	strh	r3, [r7, #10]
 8002242:	460b      	mov	r3, r1
 8002244:	813b      	strh	r3, [r7, #8]
 8002246:	4613      	mov	r3, r2
 8002248:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002258:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	2200      	movs	r2, #0
 8002262:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f960 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00d      	beq.n	800228e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002280:	d103      	bne.n	800228a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e05f      	b.n	800234e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800228e:	897b      	ldrh	r3, [r7, #10]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800229c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	6a3a      	ldr	r2, [r7, #32]
 80022a2:	492d      	ldr	r1, [pc, #180]	; (8002358 <I2C_RequestMemoryWrite+0x128>)
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f998 	bl	80025da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e04c      	b.n	800234e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022cc:	6a39      	ldr	r1, [r7, #32]
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 fa02 	bl	80026d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00d      	beq.n	80022f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d107      	bne.n	80022f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e02b      	b.n	800234e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d105      	bne.n	8002308 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022fc:	893b      	ldrh	r3, [r7, #8]
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	611a      	str	r2, [r3, #16]
 8002306:	e021      	b.n	800234c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002308:	893b      	ldrh	r3, [r7, #8]
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	b29b      	uxth	r3, r3
 800230e:	b2da      	uxtb	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002318:	6a39      	ldr	r1, [r7, #32]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f9dc 	bl	80026d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00d      	beq.n	8002342 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	2b04      	cmp	r3, #4
 800232c:	d107      	bne.n	800233e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800233c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e005      	b.n	800234e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002342:	893b      	ldrh	r3, [r7, #8]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	00010002 	.word	0x00010002

0800235c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	4608      	mov	r0, r1
 8002366:	4611      	mov	r1, r2
 8002368:	461a      	mov	r2, r3
 800236a:	4603      	mov	r3, r0
 800236c:	817b      	strh	r3, [r7, #10]
 800236e:	460b      	mov	r3, r1
 8002370:	813b      	strh	r3, [r7, #8]
 8002372:	4613      	mov	r3, r2
 8002374:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002384:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002394:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	2200      	movs	r2, #0
 800239e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f8c2 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00d      	beq.n	80023ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023bc:	d103      	bne.n	80023c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e0aa      	b.n	8002520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023ca:	897b      	ldrh	r3, [r7, #10]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	6a3a      	ldr	r2, [r7, #32]
 80023de:	4952      	ldr	r1, [pc, #328]	; (8002528 <I2C_RequestMemoryRead+0x1cc>)
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f8fa 	bl	80025da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e097      	b.n	8002520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002408:	6a39      	ldr	r1, [r7, #32]
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 f964 	bl	80026d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00d      	beq.n	8002432 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	2b04      	cmp	r3, #4
 800241c:	d107      	bne.n	800242e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e076      	b.n	8002520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d105      	bne.n	8002444 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002438:	893b      	ldrh	r3, [r7, #8]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	611a      	str	r2, [r3, #16]
 8002442:	e021      	b.n	8002488 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002444:	893b      	ldrh	r3, [r7, #8]
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	b29b      	uxth	r3, r3
 800244a:	b2da      	uxtb	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002454:	6a39      	ldr	r1, [r7, #32]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f93e 	bl	80026d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00d      	beq.n	800247e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	2b04      	cmp	r3, #4
 8002468:	d107      	bne.n	800247a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002478:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e050      	b.n	8002520 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800247e:	893b      	ldrh	r3, [r7, #8]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248a:	6a39      	ldr	r1, [r7, #32]
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f923 	bl	80026d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00d      	beq.n	80024b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	2b04      	cmp	r3, #4
 800249e:	d107      	bne.n	80024b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e035      	b.n	8002520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f82b 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00d      	beq.n	80024f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ea:	d103      	bne.n	80024f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e013      	b.n	8002520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024f8:	897b      	ldrh	r3, [r7, #10]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	b2da      	uxtb	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	6a3a      	ldr	r2, [r7, #32]
 800250c:	4906      	ldr	r1, [pc, #24]	; (8002528 <I2C_RequestMemoryRead+0x1cc>)
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f863 	bl	80025da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	00010002 	.word	0x00010002

0800252c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800253c:	e025      	b.n	800258a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d021      	beq.n	800258a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002546:	f7fe fe2d 	bl	80011a4 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d302      	bcc.n	800255c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d116      	bne.n	800258a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f043 0220 	orr.w	r2, r3, #32
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e023      	b.n	80025d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d10d      	bne.n	80025b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4013      	ands	r3, r2
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	e00c      	b.n	80025ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	43da      	mvns	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4013      	ands	r3, r2
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bf0c      	ite	eq
 80025c2:	2301      	moveq	r3, #1
 80025c4:	2300      	movne	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d0b6      	beq.n	800253e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025e8:	e051      	b.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f8:	d123      	bne.n	8002642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002608:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002612:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f043 0204 	orr.w	r2, r3, #4
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e046      	b.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d021      	beq.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264a:	f7fe fdab 	bl	80011a4 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	429a      	cmp	r2, r3
 8002658:	d302      	bcc.n	8002660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d116      	bne.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f043 0220 	orr.w	r2, r3, #32
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e020      	b.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d10c      	bne.n	80026b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4013      	ands	r3, r2
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bf14      	ite	ne
 80026aa:	2301      	movne	r3, #1
 80026ac:	2300      	moveq	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	e00b      	b.n	80026ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	43da      	mvns	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	4013      	ands	r3, r2
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf14      	ite	ne
 80026c4:	2301      	movne	r3, #1
 80026c6:	2300      	moveq	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d18d      	bne.n	80025ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026e4:	e02d      	b.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f8ce 	bl	8002888 <I2C_IsAcknowledgeFailed>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e02d      	b.n	8002752 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d021      	beq.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fe:	f7fe fd51 	bl	80011a4 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	429a      	cmp	r2, r3
 800270c:	d302      	bcc.n	8002714 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d116      	bne.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f043 0220 	orr.w	r2, r3, #32
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e007      	b.n	8002752 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274c:	2b80      	cmp	r3, #128	; 0x80
 800274e:	d1ca      	bne.n	80026e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002766:	e02d      	b.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f88d 	bl	8002888 <I2C_IsAcknowledgeFailed>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e02d      	b.n	80027d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277e:	d021      	beq.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002780:	f7fe fd10 	bl	80011a4 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	429a      	cmp	r2, r3
 800278e:	d302      	bcc.n	8002796 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d116      	bne.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e007      	b.n	80027d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d1ca      	bne.n	8002768 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027e8:	e042      	b.n	8002870 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d119      	bne.n	800282c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0210 	mvn.w	r2, #16
 8002800:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e029      	b.n	8002880 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282c:	f7fe fcba 	bl	80011a4 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	429a      	cmp	r2, r3
 800283a:	d302      	bcc.n	8002842 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d116      	bne.n	8002870 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	f043 0220 	orr.w	r2, r3, #32
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e007      	b.n	8002880 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287a:	2b40      	cmp	r3, #64	; 0x40
 800287c:	d1b5      	bne.n	80027ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289e:	d11b      	bne.n	80028d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f043 0204 	orr.w	r2, r3, #4
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e267      	b.n	8002dca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d075      	beq.n	80029f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002906:	4b88      	ldr	r3, [pc, #544]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b04      	cmp	r3, #4
 8002910:	d00c      	beq.n	800292c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002912:	4b85      	ldr	r3, [pc, #532]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800291a:	2b08      	cmp	r3, #8
 800291c:	d112      	bne.n	8002944 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800291e:	4b82      	ldr	r3, [pc, #520]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800292a:	d10b      	bne.n	8002944 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292c:	4b7e      	ldr	r3, [pc, #504]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d05b      	beq.n	80029f0 <HAL_RCC_OscConfig+0x108>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d157      	bne.n	80029f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e242      	b.n	8002dca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294c:	d106      	bne.n	800295c <HAL_RCC_OscConfig+0x74>
 800294e:	4b76      	ldr	r3, [pc, #472]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a75      	ldr	r2, [pc, #468]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e01d      	b.n	8002998 <HAL_RCC_OscConfig+0xb0>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0x98>
 8002966:	4b70      	ldr	r3, [pc, #448]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a6f      	ldr	r2, [pc, #444]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 800296c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	4b6d      	ldr	r3, [pc, #436]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a6c      	ldr	r2, [pc, #432]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	e00b      	b.n	8002998 <HAL_RCC_OscConfig+0xb0>
 8002980:	4b69      	ldr	r3, [pc, #420]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a68      	ldr	r2, [pc, #416]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b66      	ldr	r3, [pc, #408]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a65      	ldr	r2, [pc, #404]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d013      	beq.n	80029c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fe fc00 	bl	80011a4 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a8:	f7fe fbfc 	bl	80011a4 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	; 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e207      	b.n	8002dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	4b5b      	ldr	r3, [pc, #364]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0xc0>
 80029c6:	e014      	b.n	80029f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7fe fbec 	bl	80011a4 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d0:	f7fe fbe8 	bl	80011a4 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	; 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e1f3      	b.n	8002dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	4b51      	ldr	r3, [pc, #324]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0xe8>
 80029ee:	e000      	b.n	80029f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d063      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029fe:	4b4a      	ldr	r3, [pc, #296]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a0a:	4b47      	ldr	r3, [pc, #284]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d11c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a16:	4b44      	ldr	r3, [pc, #272]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d116      	bne.n	8002a50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a22:	4b41      	ldr	r3, [pc, #260]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_RCC_OscConfig+0x152>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e1c7      	b.n	8002dca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3a:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4937      	ldr	r1, [pc, #220]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4e:	e03a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a58:	4b34      	ldr	r3, [pc, #208]	; (8002b2c <HAL_RCC_OscConfig+0x244>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5e:	f7fe fba1 	bl	80011a4 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a66:	f7fe fb9d 	bl	80011a4 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e1a8      	b.n	8002dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a78:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a84:	4b28      	ldr	r3, [pc, #160]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4925      	ldr	r1, [pc, #148]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]
 8002a98:	e015      	b.n	8002ac6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9a:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <HAL_RCC_OscConfig+0x244>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fb80 	bl	80011a4 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa8:	f7fe fb7c 	bl	80011a4 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e187      	b.n	8002dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aba:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d036      	beq.n	8002b40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d016      	beq.n	8002b08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ada:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <HAL_RCC_OscConfig+0x248>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7fe fb60 	bl	80011a4 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae8:	f7fe fb5c 	bl	80011a4 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e167      	b.n	8002dca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afa:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_RCC_OscConfig+0x240>)
 8002afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x200>
 8002b06:	e01b      	b.n	8002b40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <HAL_RCC_OscConfig+0x248>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fb49 	bl	80011a4 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b14:	e00e      	b.n	8002b34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b16:	f7fe fb45 	bl	80011a4 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d907      	bls.n	8002b34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e150      	b.n	8002dca <HAL_RCC_OscConfig+0x4e2>
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	42470000 	.word	0x42470000
 8002b30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	4b88      	ldr	r3, [pc, #544]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1ea      	bne.n	8002b16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8097 	beq.w	8002c7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b52:	4b81      	ldr	r3, [pc, #516]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10f      	bne.n	8002b7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	4b7d      	ldr	r3, [pc, #500]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	4a7c      	ldr	r2, [pc, #496]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6e:	4b7a      	ldr	r3, [pc, #488]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7e:	4b77      	ldr	r3, [pc, #476]	; (8002d5c <HAL_RCC_OscConfig+0x474>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d118      	bne.n	8002bbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b8a:	4b74      	ldr	r3, [pc, #464]	; (8002d5c <HAL_RCC_OscConfig+0x474>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a73      	ldr	r2, [pc, #460]	; (8002d5c <HAL_RCC_OscConfig+0x474>)
 8002b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b96:	f7fe fb05 	bl	80011a4 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9e:	f7fe fb01 	bl	80011a4 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e10c      	b.n	8002dca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb0:	4b6a      	ldr	r3, [pc, #424]	; (8002d5c <HAL_RCC_OscConfig+0x474>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x2ea>
 8002bc4:	4b64      	ldr	r3, [pc, #400]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	4a63      	ldr	r2, [pc, #396]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd0:	e01c      	b.n	8002c0c <HAL_RCC_OscConfig+0x324>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b05      	cmp	r3, #5
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x30c>
 8002bda:	4b5f      	ldr	r3, [pc, #380]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	4a5e      	ldr	r2, [pc, #376]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002be0:	f043 0304 	orr.w	r3, r3, #4
 8002be4:	6713      	str	r3, [r2, #112]	; 0x70
 8002be6:	4b5c      	ldr	r3, [pc, #368]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bea:	4a5b      	ldr	r2, [pc, #364]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0x324>
 8002bf4:	4b58      	ldr	r3, [pc, #352]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	4a57      	ldr	r2, [pc, #348]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002c00:	4b55      	ldr	r3, [pc, #340]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	4a54      	ldr	r2, [pc, #336]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002c06:	f023 0304 	bic.w	r3, r3, #4
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d015      	beq.n	8002c40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c14:	f7fe fac6 	bl	80011a4 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1c:	f7fe fac2 	bl	80011a4 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e0cb      	b.n	8002dca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c32:	4b49      	ldr	r3, [pc, #292]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0ee      	beq.n	8002c1c <HAL_RCC_OscConfig+0x334>
 8002c3e:	e014      	b.n	8002c6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c40:	f7fe fab0 	bl	80011a4 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c48:	f7fe faac 	bl	80011a4 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e0b5      	b.n	8002dca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1ee      	bne.n	8002c48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c6a:	7dfb      	ldrb	r3, [r7, #23]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d105      	bne.n	8002c7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c70:	4b39      	ldr	r3, [pc, #228]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	4a38      	ldr	r2, [pc, #224]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80a1 	beq.w	8002dc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c86:	4b34      	ldr	r3, [pc, #208]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d05c      	beq.n	8002d4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d141      	bne.n	8002d1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9a:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <HAL_RCC_OscConfig+0x478>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fa80 	bl	80011a4 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fe fa7c 	bl	80011a4 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e087      	b.n	8002dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cba:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	019b      	lsls	r3, r3, #6
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	041b      	lsls	r3, r3, #16
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	061b      	lsls	r3, r3, #24
 8002cea:	491b      	ldr	r1, [pc, #108]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_RCC_OscConfig+0x478>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fa55 	bl	80011a4 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfe:	f7fe fa51 	bl	80011a4 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e05c      	b.n	8002dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x416>
 8002d1c:	e054      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <HAL_RCC_OscConfig+0x478>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe fa3e 	bl	80011a4 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fe fa3a 	bl	80011a4 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e045      	b.n	8002dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_RCC_OscConfig+0x470>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x444>
 8002d4a:	e03d      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d107      	bne.n	8002d64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e038      	b.n	8002dca <HAL_RCC_OscConfig+0x4e2>
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40007000 	.word	0x40007000
 8002d60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d64:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <HAL_RCC_OscConfig+0x4ec>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d028      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d121      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d11a      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d94:	4013      	ands	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d111      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	085b      	lsrs	r3, r3, #1
 8002dac:	3b01      	subs	r3, #1
 8002dae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d107      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800

08002dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0cc      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dec:	4b68      	ldr	r3, [pc, #416]	; (8002f90 <HAL_RCC_ClockConfig+0x1b8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d90c      	bls.n	8002e14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b65      	ldr	r3, [pc, #404]	; (8002f90 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b63      	ldr	r3, [pc, #396]	; (8002f90 <HAL_RCC_ClockConfig+0x1b8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0b8      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d020      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e2c:	4b59      	ldr	r3, [pc, #356]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4a58      	ldr	r2, [pc, #352]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e44:	4b53      	ldr	r3, [pc, #332]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	4a52      	ldr	r2, [pc, #328]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e50:	4b50      	ldr	r3, [pc, #320]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	494d      	ldr	r1, [pc, #308]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d044      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	4b47      	ldr	r3, [pc, #284]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d119      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e07f      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d003      	beq.n	8002e96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e96:	4b3f      	ldr	r3, [pc, #252]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e06f      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea6:	4b3b      	ldr	r3, [pc, #236]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e067      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb6:	4b37      	ldr	r3, [pc, #220]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f023 0203 	bic.w	r2, r3, #3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4934      	ldr	r1, [pc, #208]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec8:	f7fe f96c 	bl	80011a4 <HAL_GetTick>
 8002ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed0:	f7fe f968 	bl	80011a4 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e04f      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee6:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 020c 	and.w	r2, r3, #12
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d1eb      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <HAL_RCC_ClockConfig+0x1b8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d20c      	bcs.n	8002f20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f06:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <HAL_RCC_ClockConfig+0x1b8>)
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0e:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <HAL_RCC_ClockConfig+0x1b8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e032      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f2c:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4916      	ldr	r1, [pc, #88]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f4a:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	490e      	ldr	r1, [pc, #56]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f5e:	f000 f821 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002f62:	4602      	mov	r2, r0
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	490a      	ldr	r1, [pc, #40]	; (8002f98 <HAL_RCC_ClockConfig+0x1c0>)
 8002f70:	5ccb      	ldrb	r3, [r1, r3]
 8002f72:	fa22 f303 	lsr.w	r3, r2, r3
 8002f76:	4a09      	ldr	r2, [pc, #36]	; (8002f9c <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe f8cc 	bl	800111c <HAL_InitTick>

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023c00 	.word	0x40023c00
 8002f94:	40023800 	.word	0x40023800
 8002f98:	08004348 	.word	0x08004348
 8002f9c:	20000034 	.word	0x20000034
 8002fa0:	20000038 	.word	0x20000038

08002fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa8:	b094      	sub	sp, #80	; 0x50
 8002faa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	647b      	str	r3, [r7, #68]	; 0x44
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fbc:	4b79      	ldr	r3, [pc, #484]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d00d      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	f200 80e1 	bhi.w	8003190 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d003      	beq.n	8002fde <HAL_RCC_GetSysClockFreq+0x3a>
 8002fd6:	e0db      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fd8:	4b73      	ldr	r3, [pc, #460]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fda:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fdc:	e0db      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fde:	4b73      	ldr	r3, [pc, #460]	; (80031ac <HAL_RCC_GetSysClockFreq+0x208>)
 8002fe0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fe2:	e0d8      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fe4:	4b6f      	ldr	r3, [pc, #444]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fee:	4b6d      	ldr	r3, [pc, #436]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d063      	beq.n	80030c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffa:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	2200      	movs	r2, #0
 8003002:	63bb      	str	r3, [r7, #56]	; 0x38
 8003004:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800300c:	633b      	str	r3, [r7, #48]	; 0x30
 800300e:	2300      	movs	r3, #0
 8003010:	637b      	str	r3, [r7, #52]	; 0x34
 8003012:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003016:	4622      	mov	r2, r4
 8003018:	462b      	mov	r3, r5
 800301a:	f04f 0000 	mov.w	r0, #0
 800301e:	f04f 0100 	mov.w	r1, #0
 8003022:	0159      	lsls	r1, r3, #5
 8003024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003028:	0150      	lsls	r0, r2, #5
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4621      	mov	r1, r4
 8003030:	1a51      	subs	r1, r2, r1
 8003032:	6139      	str	r1, [r7, #16]
 8003034:	4629      	mov	r1, r5
 8003036:	eb63 0301 	sbc.w	r3, r3, r1
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003048:	4659      	mov	r1, fp
 800304a:	018b      	lsls	r3, r1, #6
 800304c:	4651      	mov	r1, sl
 800304e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003052:	4651      	mov	r1, sl
 8003054:	018a      	lsls	r2, r1, #6
 8003056:	4651      	mov	r1, sl
 8003058:	ebb2 0801 	subs.w	r8, r2, r1
 800305c:	4659      	mov	r1, fp
 800305e:	eb63 0901 	sbc.w	r9, r3, r1
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800306e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003076:	4690      	mov	r8, r2
 8003078:	4699      	mov	r9, r3
 800307a:	4623      	mov	r3, r4
 800307c:	eb18 0303 	adds.w	r3, r8, r3
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	462b      	mov	r3, r5
 8003084:	eb49 0303 	adc.w	r3, r9, r3
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003096:	4629      	mov	r1, r5
 8003098:	024b      	lsls	r3, r1, #9
 800309a:	4621      	mov	r1, r4
 800309c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030a0:	4621      	mov	r1, r4
 80030a2:	024a      	lsls	r2, r1, #9
 80030a4:	4610      	mov	r0, r2
 80030a6:	4619      	mov	r1, r3
 80030a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030aa:	2200      	movs	r2, #0
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030b4:	f7fd f8e4 	bl	8000280 <__aeabi_uldivmod>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4613      	mov	r3, r2
 80030be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c0:	e058      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c2:	4b38      	ldr	r3, [pc, #224]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	099b      	lsrs	r3, r3, #6
 80030c8:	2200      	movs	r2, #0
 80030ca:	4618      	mov	r0, r3
 80030cc:	4611      	mov	r1, r2
 80030ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030d2:	623b      	str	r3, [r7, #32]
 80030d4:	2300      	movs	r3, #0
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
 80030d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030dc:	4642      	mov	r2, r8
 80030de:	464b      	mov	r3, r9
 80030e0:	f04f 0000 	mov.w	r0, #0
 80030e4:	f04f 0100 	mov.w	r1, #0
 80030e8:	0159      	lsls	r1, r3, #5
 80030ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ee:	0150      	lsls	r0, r2, #5
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4641      	mov	r1, r8
 80030f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80030fa:	4649      	mov	r1, r9
 80030fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800310c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003110:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003114:	ebb2 040a 	subs.w	r4, r2, sl
 8003118:	eb63 050b 	sbc.w	r5, r3, fp
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	00eb      	lsls	r3, r5, #3
 8003126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800312a:	00e2      	lsls	r2, r4, #3
 800312c:	4614      	mov	r4, r2
 800312e:	461d      	mov	r5, r3
 8003130:	4643      	mov	r3, r8
 8003132:	18e3      	adds	r3, r4, r3
 8003134:	603b      	str	r3, [r7, #0]
 8003136:	464b      	mov	r3, r9
 8003138:	eb45 0303 	adc.w	r3, r5, r3
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	e9d7 4500 	ldrd	r4, r5, [r7]
 800314a:	4629      	mov	r1, r5
 800314c:	028b      	lsls	r3, r1, #10
 800314e:	4621      	mov	r1, r4
 8003150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003154:	4621      	mov	r1, r4
 8003156:	028a      	lsls	r2, r1, #10
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800315e:	2200      	movs	r2, #0
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	61fa      	str	r2, [r7, #28]
 8003164:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003168:	f7fd f88a 	bl	8000280 <__aeabi_uldivmod>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4613      	mov	r3, r2
 8003172:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	0c1b      	lsrs	r3, r3, #16
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	3301      	adds	r3, #1
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003184:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003188:	fbb2 f3f3 	udiv	r3, r2, r3
 800318c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800318e:	e002      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003192:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003198:	4618      	mov	r0, r3
 800319a:	3750      	adds	r7, #80	; 0x50
 800319c:	46bd      	mov	sp, r7
 800319e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800
 80031a8:	00f42400 	.word	0x00f42400
 80031ac:	007a1200 	.word	0x007a1200

080031b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031b6:	681b      	ldr	r3, [r3, #0]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20000034 	.word	0x20000034

080031c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031cc:	f7ff fff0 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	0a9b      	lsrs	r3, r3, #10
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4903      	ldr	r1, [pc, #12]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40023800 	.word	0x40023800
 80031ec:	08004358 	.word	0x08004358

080031f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031f4:	f7ff ffdc 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	0b5b      	lsrs	r3, r3, #13
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	4903      	ldr	r1, [pc, #12]	; (8003214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003206:	5ccb      	ldrb	r3, [r1, r3]
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40023800 	.word	0x40023800
 8003214:	08004358 	.word	0x08004358

08003218 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e03f      	b.n	80032aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fd fe30 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2224      	movs	r2, #36	; 0x24
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800325a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f929 	bl	80034b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003270:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003280:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003290:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b08a      	sub	sp, #40	; 0x28
 80032b6:	af02      	add	r7, sp, #8
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d17c      	bne.n	80033cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <HAL_UART_Transmit+0x2c>
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e075      	b.n	80033ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_UART_Transmit+0x3e>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e06e      	b.n	80033ce <HAL_UART_Transmit+0x11c>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2221      	movs	r2, #33	; 0x21
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003306:	f7fd ff4d 	bl	80011a4 <HAL_GetTick>
 800330a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	88fa      	ldrh	r2, [r7, #6]
 8003310:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	88fa      	ldrh	r2, [r7, #6]
 8003316:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003320:	d108      	bne.n	8003334 <HAL_UART_Transmit+0x82>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d104      	bne.n	8003334 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	61bb      	str	r3, [r7, #24]
 8003332:	e003      	b.n	800333c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003338:	2300      	movs	r3, #0
 800333a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003344:	e02a      	b.n	800339c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2200      	movs	r2, #0
 800334e:	2180      	movs	r1, #128	; 0x80
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f840 	bl	80033d6 <UART_WaitOnFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e036      	b.n	80033ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10b      	bne.n	800337e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003374:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	3302      	adds	r3, #2
 800337a:	61bb      	str	r3, [r7, #24]
 800337c:	e007      	b.n	800338e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	781a      	ldrb	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	3301      	adds	r3, #1
 800338c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1cf      	bne.n	8003346 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2200      	movs	r2, #0
 80033ae:	2140      	movs	r1, #64	; 0x40
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f810 	bl	80033d6 <UART_WaitOnFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e006      	b.n	80033ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e000      	b.n	80033ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033cc:	2302      	movs	r3, #2
  }
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b090      	sub	sp, #64	; 0x40
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	603b      	str	r3, [r7, #0]
 80033e2:	4613      	mov	r3, r2
 80033e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e6:	e050      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ee:	d04c      	beq.n	800348a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <UART_WaitOnFlagUntilTimeout+0x30>
 80033f6:	f7fd fed5 	bl	80011a4 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003402:	429a      	cmp	r2, r3
 8003404:	d241      	bcs.n	800348a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	330c      	adds	r3, #12
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	e853 3f00 	ldrex	r3, [r3]
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800341c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	330c      	adds	r3, #12
 8003424:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003426:	637a      	str	r2, [r7, #52]	; 0x34
 8003428:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800342c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e5      	bne.n	8003406 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3314      	adds	r3, #20
 8003440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	613b      	str	r3, [r7, #16]
   return(result);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	63bb      	str	r3, [r7, #56]	; 0x38
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3314      	adds	r3, #20
 8003458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800345a:	623a      	str	r2, [r7, #32]
 800345c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345e:	69f9      	ldr	r1, [r7, #28]
 8003460:	6a3a      	ldr	r2, [r7, #32]
 8003462:	e841 2300 	strex	r3, r2, [r1]
 8003466:	61bb      	str	r3, [r7, #24]
   return(result);
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1e5      	bne.n	800343a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e00f      	b.n	80034aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4013      	ands	r3, r2
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	429a      	cmp	r2, r3
 8003498:	bf0c      	ite	eq
 800349a:	2301      	moveq	r3, #1
 800349c:	2300      	movne	r3, #0
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d09f      	beq.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3740      	adds	r7, #64	; 0x40
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034b8:	b0c0      	sub	sp, #256	; 0x100
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d0:	68d9      	ldr	r1, [r3, #12]
 80034d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	ea40 0301 	orr.w	r3, r0, r1
 80034dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800350c:	f021 010c 	bic.w	r1, r1, #12
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800351a:	430b      	orrs	r3, r1
 800351c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800351e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800352a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352e:	6999      	ldr	r1, [r3, #24]
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	ea40 0301 	orr.w	r3, r0, r1
 800353a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	4b8f      	ldr	r3, [pc, #572]	; (8003780 <UART_SetConfig+0x2cc>)
 8003544:	429a      	cmp	r2, r3
 8003546:	d005      	beq.n	8003554 <UART_SetConfig+0xa0>
 8003548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4b8d      	ldr	r3, [pc, #564]	; (8003784 <UART_SetConfig+0x2d0>)
 8003550:	429a      	cmp	r2, r3
 8003552:	d104      	bne.n	800355e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003554:	f7ff fe4c 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 8003558:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800355c:	e003      	b.n	8003566 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800355e:	f7ff fe33 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 8003562:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003570:	f040 810c 	bne.w	800378c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003578:	2200      	movs	r2, #0
 800357a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800357e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003582:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003586:	4622      	mov	r2, r4
 8003588:	462b      	mov	r3, r5
 800358a:	1891      	adds	r1, r2, r2
 800358c:	65b9      	str	r1, [r7, #88]	; 0x58
 800358e:	415b      	adcs	r3, r3
 8003590:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003592:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003596:	4621      	mov	r1, r4
 8003598:	eb12 0801 	adds.w	r8, r2, r1
 800359c:	4629      	mov	r1, r5
 800359e:	eb43 0901 	adc.w	r9, r3, r1
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035b6:	4690      	mov	r8, r2
 80035b8:	4699      	mov	r9, r3
 80035ba:	4623      	mov	r3, r4
 80035bc:	eb18 0303 	adds.w	r3, r8, r3
 80035c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035c4:	462b      	mov	r3, r5
 80035c6:	eb49 0303 	adc.w	r3, r9, r3
 80035ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035e2:	460b      	mov	r3, r1
 80035e4:	18db      	adds	r3, r3, r3
 80035e6:	653b      	str	r3, [r7, #80]	; 0x50
 80035e8:	4613      	mov	r3, r2
 80035ea:	eb42 0303 	adc.w	r3, r2, r3
 80035ee:	657b      	str	r3, [r7, #84]	; 0x54
 80035f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035f8:	f7fc fe42 	bl	8000280 <__aeabi_uldivmod>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4b61      	ldr	r3, [pc, #388]	; (8003788 <UART_SetConfig+0x2d4>)
 8003602:	fba3 2302 	umull	r2, r3, r3, r2
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	011c      	lsls	r4, r3, #4
 800360a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800360e:	2200      	movs	r2, #0
 8003610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003614:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003618:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800361c:	4642      	mov	r2, r8
 800361e:	464b      	mov	r3, r9
 8003620:	1891      	adds	r1, r2, r2
 8003622:	64b9      	str	r1, [r7, #72]	; 0x48
 8003624:	415b      	adcs	r3, r3
 8003626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003628:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800362c:	4641      	mov	r1, r8
 800362e:	eb12 0a01 	adds.w	sl, r2, r1
 8003632:	4649      	mov	r1, r9
 8003634:	eb43 0b01 	adc.w	fp, r3, r1
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003644:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003648:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800364c:	4692      	mov	sl, r2
 800364e:	469b      	mov	fp, r3
 8003650:	4643      	mov	r3, r8
 8003652:	eb1a 0303 	adds.w	r3, sl, r3
 8003656:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800365a:	464b      	mov	r3, r9
 800365c:	eb4b 0303 	adc.w	r3, fp, r3
 8003660:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003670:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003674:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003678:	460b      	mov	r3, r1
 800367a:	18db      	adds	r3, r3, r3
 800367c:	643b      	str	r3, [r7, #64]	; 0x40
 800367e:	4613      	mov	r3, r2
 8003680:	eb42 0303 	adc.w	r3, r2, r3
 8003684:	647b      	str	r3, [r7, #68]	; 0x44
 8003686:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800368a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800368e:	f7fc fdf7 	bl	8000280 <__aeabi_uldivmod>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4611      	mov	r1, r2
 8003698:	4b3b      	ldr	r3, [pc, #236]	; (8003788 <UART_SetConfig+0x2d4>)
 800369a:	fba3 2301 	umull	r2, r3, r3, r1
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	2264      	movs	r2, #100	; 0x64
 80036a2:	fb02 f303 	mul.w	r3, r2, r3
 80036a6:	1acb      	subs	r3, r1, r3
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036ae:	4b36      	ldr	r3, [pc, #216]	; (8003788 <UART_SetConfig+0x2d4>)
 80036b0:	fba3 2302 	umull	r2, r3, r3, r2
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036bc:	441c      	add	r4, r3
 80036be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c2:	2200      	movs	r2, #0
 80036c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036d0:	4642      	mov	r2, r8
 80036d2:	464b      	mov	r3, r9
 80036d4:	1891      	adds	r1, r2, r2
 80036d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80036d8:	415b      	adcs	r3, r3
 80036da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036e0:	4641      	mov	r1, r8
 80036e2:	1851      	adds	r1, r2, r1
 80036e4:	6339      	str	r1, [r7, #48]	; 0x30
 80036e6:	4649      	mov	r1, r9
 80036e8:	414b      	adcs	r3, r1
 80036ea:	637b      	str	r3, [r7, #52]	; 0x34
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036f8:	4659      	mov	r1, fp
 80036fa:	00cb      	lsls	r3, r1, #3
 80036fc:	4651      	mov	r1, sl
 80036fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003702:	4651      	mov	r1, sl
 8003704:	00ca      	lsls	r2, r1, #3
 8003706:	4610      	mov	r0, r2
 8003708:	4619      	mov	r1, r3
 800370a:	4603      	mov	r3, r0
 800370c:	4642      	mov	r2, r8
 800370e:	189b      	adds	r3, r3, r2
 8003710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003714:	464b      	mov	r3, r9
 8003716:	460a      	mov	r2, r1
 8003718:	eb42 0303 	adc.w	r3, r2, r3
 800371c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800372c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003730:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003734:	460b      	mov	r3, r1
 8003736:	18db      	adds	r3, r3, r3
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28
 800373a:	4613      	mov	r3, r2
 800373c:	eb42 0303 	adc.w	r3, r2, r3
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003742:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003746:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800374a:	f7fc fd99 	bl	8000280 <__aeabi_uldivmod>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <UART_SetConfig+0x2d4>)
 8003754:	fba3 1302 	umull	r1, r3, r3, r2
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	2164      	movs	r1, #100	; 0x64
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	3332      	adds	r3, #50	; 0x32
 8003766:	4a08      	ldr	r2, [pc, #32]	; (8003788 <UART_SetConfig+0x2d4>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	f003 0207 	and.w	r2, r3, #7
 8003772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4422      	add	r2, r4
 800377a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800377c:	e105      	b.n	800398a <UART_SetConfig+0x4d6>
 800377e:	bf00      	nop
 8003780:	40011000 	.word	0x40011000
 8003784:	40011400 	.word	0x40011400
 8003788:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800378c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003790:	2200      	movs	r2, #0
 8003792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003796:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800379a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800379e:	4642      	mov	r2, r8
 80037a0:	464b      	mov	r3, r9
 80037a2:	1891      	adds	r1, r2, r2
 80037a4:	6239      	str	r1, [r7, #32]
 80037a6:	415b      	adcs	r3, r3
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
 80037aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ae:	4641      	mov	r1, r8
 80037b0:	1854      	adds	r4, r2, r1
 80037b2:	4649      	mov	r1, r9
 80037b4:	eb43 0501 	adc.w	r5, r3, r1
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	00eb      	lsls	r3, r5, #3
 80037c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037c6:	00e2      	lsls	r2, r4, #3
 80037c8:	4614      	mov	r4, r2
 80037ca:	461d      	mov	r5, r3
 80037cc:	4643      	mov	r3, r8
 80037ce:	18e3      	adds	r3, r4, r3
 80037d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037d4:	464b      	mov	r3, r9
 80037d6:	eb45 0303 	adc.w	r3, r5, r3
 80037da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037fa:	4629      	mov	r1, r5
 80037fc:	008b      	lsls	r3, r1, #2
 80037fe:	4621      	mov	r1, r4
 8003800:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003804:	4621      	mov	r1, r4
 8003806:	008a      	lsls	r2, r1, #2
 8003808:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800380c:	f7fc fd38 	bl	8000280 <__aeabi_uldivmod>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4b60      	ldr	r3, [pc, #384]	; (8003998 <UART_SetConfig+0x4e4>)
 8003816:	fba3 2302 	umull	r2, r3, r3, r2
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	011c      	lsls	r4, r3, #4
 800381e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003822:	2200      	movs	r2, #0
 8003824:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003828:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800382c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003830:	4642      	mov	r2, r8
 8003832:	464b      	mov	r3, r9
 8003834:	1891      	adds	r1, r2, r2
 8003836:	61b9      	str	r1, [r7, #24]
 8003838:	415b      	adcs	r3, r3
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003840:	4641      	mov	r1, r8
 8003842:	1851      	adds	r1, r2, r1
 8003844:	6139      	str	r1, [r7, #16]
 8003846:	4649      	mov	r1, r9
 8003848:	414b      	adcs	r3, r1
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003858:	4659      	mov	r1, fp
 800385a:	00cb      	lsls	r3, r1, #3
 800385c:	4651      	mov	r1, sl
 800385e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003862:	4651      	mov	r1, sl
 8003864:	00ca      	lsls	r2, r1, #3
 8003866:	4610      	mov	r0, r2
 8003868:	4619      	mov	r1, r3
 800386a:	4603      	mov	r3, r0
 800386c:	4642      	mov	r2, r8
 800386e:	189b      	adds	r3, r3, r2
 8003870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003874:	464b      	mov	r3, r9
 8003876:	460a      	mov	r2, r1
 8003878:	eb42 0303 	adc.w	r3, r2, r3
 800387c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	67bb      	str	r3, [r7, #120]	; 0x78
 800388a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003898:	4649      	mov	r1, r9
 800389a:	008b      	lsls	r3, r1, #2
 800389c:	4641      	mov	r1, r8
 800389e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038a2:	4641      	mov	r1, r8
 80038a4:	008a      	lsls	r2, r1, #2
 80038a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038aa:	f7fc fce9 	bl	8000280 <__aeabi_uldivmod>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4b39      	ldr	r3, [pc, #228]	; (8003998 <UART_SetConfig+0x4e4>)
 80038b4:	fba3 1302 	umull	r1, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	2164      	movs	r1, #100	; 0x64
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	3332      	adds	r3, #50	; 0x32
 80038c6:	4a34      	ldr	r2, [pc, #208]	; (8003998 <UART_SetConfig+0x4e4>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038d2:	441c      	add	r4, r3
 80038d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038d8:	2200      	movs	r2, #0
 80038da:	673b      	str	r3, [r7, #112]	; 0x70
 80038dc:	677a      	str	r2, [r7, #116]	; 0x74
 80038de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038e2:	4642      	mov	r2, r8
 80038e4:	464b      	mov	r3, r9
 80038e6:	1891      	adds	r1, r2, r2
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	415b      	adcs	r3, r3
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038f2:	4641      	mov	r1, r8
 80038f4:	1851      	adds	r1, r2, r1
 80038f6:	6039      	str	r1, [r7, #0]
 80038f8:	4649      	mov	r1, r9
 80038fa:	414b      	adcs	r3, r1
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800390a:	4659      	mov	r1, fp
 800390c:	00cb      	lsls	r3, r1, #3
 800390e:	4651      	mov	r1, sl
 8003910:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003914:	4651      	mov	r1, sl
 8003916:	00ca      	lsls	r2, r1, #3
 8003918:	4610      	mov	r0, r2
 800391a:	4619      	mov	r1, r3
 800391c:	4603      	mov	r3, r0
 800391e:	4642      	mov	r2, r8
 8003920:	189b      	adds	r3, r3, r2
 8003922:	66bb      	str	r3, [r7, #104]	; 0x68
 8003924:	464b      	mov	r3, r9
 8003926:	460a      	mov	r2, r1
 8003928:	eb42 0303 	adc.w	r3, r2, r3
 800392c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	663b      	str	r3, [r7, #96]	; 0x60
 8003938:	667a      	str	r2, [r7, #100]	; 0x64
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003946:	4649      	mov	r1, r9
 8003948:	008b      	lsls	r3, r1, #2
 800394a:	4641      	mov	r1, r8
 800394c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003950:	4641      	mov	r1, r8
 8003952:	008a      	lsls	r2, r1, #2
 8003954:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003958:	f7fc fc92 	bl	8000280 <__aeabi_uldivmod>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <UART_SetConfig+0x4e4>)
 8003962:	fba3 1302 	umull	r1, r3, r3, r2
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	2164      	movs	r1, #100	; 0x64
 800396a:	fb01 f303 	mul.w	r3, r1, r3
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	3332      	adds	r3, #50	; 0x32
 8003974:	4a08      	ldr	r2, [pc, #32]	; (8003998 <UART_SetConfig+0x4e4>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	f003 020f 	and.w	r2, r3, #15
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4422      	add	r2, r4
 8003988:	609a      	str	r2, [r3, #8]
}
 800398a:	bf00      	nop
 800398c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003990:	46bd      	mov	sp, r7
 8003992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003996:	bf00      	nop
 8003998:	51eb851f 	.word	0x51eb851f

0800399c <__errno>:
 800399c:	4b01      	ldr	r3, [pc, #4]	; (80039a4 <__errno+0x8>)
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20000040 	.word	0x20000040

080039a8 <__libc_init_array>:
 80039a8:	b570      	push	{r4, r5, r6, lr}
 80039aa:	4d0d      	ldr	r5, [pc, #52]	; (80039e0 <__libc_init_array+0x38>)
 80039ac:	4c0d      	ldr	r4, [pc, #52]	; (80039e4 <__libc_init_array+0x3c>)
 80039ae:	1b64      	subs	r4, r4, r5
 80039b0:	10a4      	asrs	r4, r4, #2
 80039b2:	2600      	movs	r6, #0
 80039b4:	42a6      	cmp	r6, r4
 80039b6:	d109      	bne.n	80039cc <__libc_init_array+0x24>
 80039b8:	4d0b      	ldr	r5, [pc, #44]	; (80039e8 <__libc_init_array+0x40>)
 80039ba:	4c0c      	ldr	r4, [pc, #48]	; (80039ec <__libc_init_array+0x44>)
 80039bc:	f000 fc9e 	bl	80042fc <_init>
 80039c0:	1b64      	subs	r4, r4, r5
 80039c2:	10a4      	asrs	r4, r4, #2
 80039c4:	2600      	movs	r6, #0
 80039c6:	42a6      	cmp	r6, r4
 80039c8:	d105      	bne.n	80039d6 <__libc_init_array+0x2e>
 80039ca:	bd70      	pop	{r4, r5, r6, pc}
 80039cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d0:	4798      	blx	r3
 80039d2:	3601      	adds	r6, #1
 80039d4:	e7ee      	b.n	80039b4 <__libc_init_array+0xc>
 80039d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039da:	4798      	blx	r3
 80039dc:	3601      	adds	r6, #1
 80039de:	e7f2      	b.n	80039c6 <__libc_init_array+0x1e>
 80039e0:	0800439c 	.word	0x0800439c
 80039e4:	0800439c 	.word	0x0800439c
 80039e8:	0800439c 	.word	0x0800439c
 80039ec:	080043a0 	.word	0x080043a0

080039f0 <malloc>:
 80039f0:	4b02      	ldr	r3, [pc, #8]	; (80039fc <malloc+0xc>)
 80039f2:	4601      	mov	r1, r0
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	f000 b87f 	b.w	8003af8 <_malloc_r>
 80039fa:	bf00      	nop
 80039fc:	20000040 	.word	0x20000040

08003a00 <free>:
 8003a00:	4b02      	ldr	r3, [pc, #8]	; (8003a0c <free+0xc>)
 8003a02:	4601      	mov	r1, r0
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	f000 b80b 	b.w	8003a20 <_free_r>
 8003a0a:	bf00      	nop
 8003a0c:	20000040 	.word	0x20000040

08003a10 <memset>:
 8003a10:	4402      	add	r2, r0
 8003a12:	4603      	mov	r3, r0
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d100      	bne.n	8003a1a <memset+0xa>
 8003a18:	4770      	bx	lr
 8003a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a1e:	e7f9      	b.n	8003a14 <memset+0x4>

08003a20 <_free_r>:
 8003a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a22:	2900      	cmp	r1, #0
 8003a24:	d044      	beq.n	8003ab0 <_free_r+0x90>
 8003a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a2a:	9001      	str	r0, [sp, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8003a32:	bfb8      	it	lt
 8003a34:	18e4      	addlt	r4, r4, r3
 8003a36:	f000 f903 	bl	8003c40 <__malloc_lock>
 8003a3a:	4a1e      	ldr	r2, [pc, #120]	; (8003ab4 <_free_r+0x94>)
 8003a3c:	9801      	ldr	r0, [sp, #4]
 8003a3e:	6813      	ldr	r3, [r2, #0]
 8003a40:	b933      	cbnz	r3, 8003a50 <_free_r+0x30>
 8003a42:	6063      	str	r3, [r4, #4]
 8003a44:	6014      	str	r4, [r2, #0]
 8003a46:	b003      	add	sp, #12
 8003a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a4c:	f000 b8fe 	b.w	8003c4c <__malloc_unlock>
 8003a50:	42a3      	cmp	r3, r4
 8003a52:	d908      	bls.n	8003a66 <_free_r+0x46>
 8003a54:	6825      	ldr	r5, [r4, #0]
 8003a56:	1961      	adds	r1, r4, r5
 8003a58:	428b      	cmp	r3, r1
 8003a5a:	bf01      	itttt	eq
 8003a5c:	6819      	ldreq	r1, [r3, #0]
 8003a5e:	685b      	ldreq	r3, [r3, #4]
 8003a60:	1949      	addeq	r1, r1, r5
 8003a62:	6021      	streq	r1, [r4, #0]
 8003a64:	e7ed      	b.n	8003a42 <_free_r+0x22>
 8003a66:	461a      	mov	r2, r3
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	b10b      	cbz	r3, 8003a70 <_free_r+0x50>
 8003a6c:	42a3      	cmp	r3, r4
 8003a6e:	d9fa      	bls.n	8003a66 <_free_r+0x46>
 8003a70:	6811      	ldr	r1, [r2, #0]
 8003a72:	1855      	adds	r5, r2, r1
 8003a74:	42a5      	cmp	r5, r4
 8003a76:	d10b      	bne.n	8003a90 <_free_r+0x70>
 8003a78:	6824      	ldr	r4, [r4, #0]
 8003a7a:	4421      	add	r1, r4
 8003a7c:	1854      	adds	r4, r2, r1
 8003a7e:	42a3      	cmp	r3, r4
 8003a80:	6011      	str	r1, [r2, #0]
 8003a82:	d1e0      	bne.n	8003a46 <_free_r+0x26>
 8003a84:	681c      	ldr	r4, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	6053      	str	r3, [r2, #4]
 8003a8a:	4421      	add	r1, r4
 8003a8c:	6011      	str	r1, [r2, #0]
 8003a8e:	e7da      	b.n	8003a46 <_free_r+0x26>
 8003a90:	d902      	bls.n	8003a98 <_free_r+0x78>
 8003a92:	230c      	movs	r3, #12
 8003a94:	6003      	str	r3, [r0, #0]
 8003a96:	e7d6      	b.n	8003a46 <_free_r+0x26>
 8003a98:	6825      	ldr	r5, [r4, #0]
 8003a9a:	1961      	adds	r1, r4, r5
 8003a9c:	428b      	cmp	r3, r1
 8003a9e:	bf04      	itt	eq
 8003aa0:	6819      	ldreq	r1, [r3, #0]
 8003aa2:	685b      	ldreq	r3, [r3, #4]
 8003aa4:	6063      	str	r3, [r4, #4]
 8003aa6:	bf04      	itt	eq
 8003aa8:	1949      	addeq	r1, r1, r5
 8003aaa:	6021      	streq	r1, [r4, #0]
 8003aac:	6054      	str	r4, [r2, #4]
 8003aae:	e7ca      	b.n	8003a46 <_free_r+0x26>
 8003ab0:	b003      	add	sp, #12
 8003ab2:	bd30      	pop	{r4, r5, pc}
 8003ab4:	200001ac 	.word	0x200001ac

08003ab8 <sbrk_aligned>:
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	4e0e      	ldr	r6, [pc, #56]	; (8003af4 <sbrk_aligned+0x3c>)
 8003abc:	460c      	mov	r4, r1
 8003abe:	6831      	ldr	r1, [r6, #0]
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	b911      	cbnz	r1, 8003aca <sbrk_aligned+0x12>
 8003ac4:	f000 f88c 	bl	8003be0 <_sbrk_r>
 8003ac8:	6030      	str	r0, [r6, #0]
 8003aca:	4621      	mov	r1, r4
 8003acc:	4628      	mov	r0, r5
 8003ace:	f000 f887 	bl	8003be0 <_sbrk_r>
 8003ad2:	1c43      	adds	r3, r0, #1
 8003ad4:	d00a      	beq.n	8003aec <sbrk_aligned+0x34>
 8003ad6:	1cc4      	adds	r4, r0, #3
 8003ad8:	f024 0403 	bic.w	r4, r4, #3
 8003adc:	42a0      	cmp	r0, r4
 8003ade:	d007      	beq.n	8003af0 <sbrk_aligned+0x38>
 8003ae0:	1a21      	subs	r1, r4, r0
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	f000 f87c 	bl	8003be0 <_sbrk_r>
 8003ae8:	3001      	adds	r0, #1
 8003aea:	d101      	bne.n	8003af0 <sbrk_aligned+0x38>
 8003aec:	f04f 34ff 	mov.w	r4, #4294967295
 8003af0:	4620      	mov	r0, r4
 8003af2:	bd70      	pop	{r4, r5, r6, pc}
 8003af4:	200001b0 	.word	0x200001b0

08003af8 <_malloc_r>:
 8003af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003afc:	1ccd      	adds	r5, r1, #3
 8003afe:	f025 0503 	bic.w	r5, r5, #3
 8003b02:	3508      	adds	r5, #8
 8003b04:	2d0c      	cmp	r5, #12
 8003b06:	bf38      	it	cc
 8003b08:	250c      	movcc	r5, #12
 8003b0a:	2d00      	cmp	r5, #0
 8003b0c:	4607      	mov	r7, r0
 8003b0e:	db01      	blt.n	8003b14 <_malloc_r+0x1c>
 8003b10:	42a9      	cmp	r1, r5
 8003b12:	d905      	bls.n	8003b20 <_malloc_r+0x28>
 8003b14:	230c      	movs	r3, #12
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	2600      	movs	r6, #0
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b20:	4e2e      	ldr	r6, [pc, #184]	; (8003bdc <_malloc_r+0xe4>)
 8003b22:	f000 f88d 	bl	8003c40 <__malloc_lock>
 8003b26:	6833      	ldr	r3, [r6, #0]
 8003b28:	461c      	mov	r4, r3
 8003b2a:	bb34      	cbnz	r4, 8003b7a <_malloc_r+0x82>
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	4638      	mov	r0, r7
 8003b30:	f7ff ffc2 	bl	8003ab8 <sbrk_aligned>
 8003b34:	1c43      	adds	r3, r0, #1
 8003b36:	4604      	mov	r4, r0
 8003b38:	d14d      	bne.n	8003bd6 <_malloc_r+0xde>
 8003b3a:	6834      	ldr	r4, [r6, #0]
 8003b3c:	4626      	mov	r6, r4
 8003b3e:	2e00      	cmp	r6, #0
 8003b40:	d140      	bne.n	8003bc4 <_malloc_r+0xcc>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	4631      	mov	r1, r6
 8003b46:	4638      	mov	r0, r7
 8003b48:	eb04 0803 	add.w	r8, r4, r3
 8003b4c:	f000 f848 	bl	8003be0 <_sbrk_r>
 8003b50:	4580      	cmp	r8, r0
 8003b52:	d13a      	bne.n	8003bca <_malloc_r+0xd2>
 8003b54:	6821      	ldr	r1, [r4, #0]
 8003b56:	3503      	adds	r5, #3
 8003b58:	1a6d      	subs	r5, r5, r1
 8003b5a:	f025 0503 	bic.w	r5, r5, #3
 8003b5e:	3508      	adds	r5, #8
 8003b60:	2d0c      	cmp	r5, #12
 8003b62:	bf38      	it	cc
 8003b64:	250c      	movcc	r5, #12
 8003b66:	4629      	mov	r1, r5
 8003b68:	4638      	mov	r0, r7
 8003b6a:	f7ff ffa5 	bl	8003ab8 <sbrk_aligned>
 8003b6e:	3001      	adds	r0, #1
 8003b70:	d02b      	beq.n	8003bca <_malloc_r+0xd2>
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	442b      	add	r3, r5
 8003b76:	6023      	str	r3, [r4, #0]
 8003b78:	e00e      	b.n	8003b98 <_malloc_r+0xa0>
 8003b7a:	6822      	ldr	r2, [r4, #0]
 8003b7c:	1b52      	subs	r2, r2, r5
 8003b7e:	d41e      	bmi.n	8003bbe <_malloc_r+0xc6>
 8003b80:	2a0b      	cmp	r2, #11
 8003b82:	d916      	bls.n	8003bb2 <_malloc_r+0xba>
 8003b84:	1961      	adds	r1, r4, r5
 8003b86:	42a3      	cmp	r3, r4
 8003b88:	6025      	str	r5, [r4, #0]
 8003b8a:	bf18      	it	ne
 8003b8c:	6059      	strne	r1, [r3, #4]
 8003b8e:	6863      	ldr	r3, [r4, #4]
 8003b90:	bf08      	it	eq
 8003b92:	6031      	streq	r1, [r6, #0]
 8003b94:	5162      	str	r2, [r4, r5]
 8003b96:	604b      	str	r3, [r1, #4]
 8003b98:	4638      	mov	r0, r7
 8003b9a:	f104 060b 	add.w	r6, r4, #11
 8003b9e:	f000 f855 	bl	8003c4c <__malloc_unlock>
 8003ba2:	f026 0607 	bic.w	r6, r6, #7
 8003ba6:	1d23      	adds	r3, r4, #4
 8003ba8:	1af2      	subs	r2, r6, r3
 8003baa:	d0b6      	beq.n	8003b1a <_malloc_r+0x22>
 8003bac:	1b9b      	subs	r3, r3, r6
 8003bae:	50a3      	str	r3, [r4, r2]
 8003bb0:	e7b3      	b.n	8003b1a <_malloc_r+0x22>
 8003bb2:	6862      	ldr	r2, [r4, #4]
 8003bb4:	42a3      	cmp	r3, r4
 8003bb6:	bf0c      	ite	eq
 8003bb8:	6032      	streq	r2, [r6, #0]
 8003bba:	605a      	strne	r2, [r3, #4]
 8003bbc:	e7ec      	b.n	8003b98 <_malloc_r+0xa0>
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	6864      	ldr	r4, [r4, #4]
 8003bc2:	e7b2      	b.n	8003b2a <_malloc_r+0x32>
 8003bc4:	4634      	mov	r4, r6
 8003bc6:	6876      	ldr	r6, [r6, #4]
 8003bc8:	e7b9      	b.n	8003b3e <_malloc_r+0x46>
 8003bca:	230c      	movs	r3, #12
 8003bcc:	603b      	str	r3, [r7, #0]
 8003bce:	4638      	mov	r0, r7
 8003bd0:	f000 f83c 	bl	8003c4c <__malloc_unlock>
 8003bd4:	e7a1      	b.n	8003b1a <_malloc_r+0x22>
 8003bd6:	6025      	str	r5, [r4, #0]
 8003bd8:	e7de      	b.n	8003b98 <_malloc_r+0xa0>
 8003bda:	bf00      	nop
 8003bdc:	200001ac 	.word	0x200001ac

08003be0 <_sbrk_r>:
 8003be0:	b538      	push	{r3, r4, r5, lr}
 8003be2:	4d06      	ldr	r5, [pc, #24]	; (8003bfc <_sbrk_r+0x1c>)
 8003be4:	2300      	movs	r3, #0
 8003be6:	4604      	mov	r4, r0
 8003be8:	4608      	mov	r0, r1
 8003bea:	602b      	str	r3, [r5, #0]
 8003bec:	f7fd fa02 	bl	8000ff4 <_sbrk>
 8003bf0:	1c43      	adds	r3, r0, #1
 8003bf2:	d102      	bne.n	8003bfa <_sbrk_r+0x1a>
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	b103      	cbz	r3, 8003bfa <_sbrk_r+0x1a>
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	bd38      	pop	{r3, r4, r5, pc}
 8003bfc:	200001b4 	.word	0x200001b4

08003c00 <siprintf>:
 8003c00:	b40e      	push	{r1, r2, r3}
 8003c02:	b500      	push	{lr}
 8003c04:	b09c      	sub	sp, #112	; 0x70
 8003c06:	ab1d      	add	r3, sp, #116	; 0x74
 8003c08:	9002      	str	r0, [sp, #8]
 8003c0a:	9006      	str	r0, [sp, #24]
 8003c0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c10:	4809      	ldr	r0, [pc, #36]	; (8003c38 <siprintf+0x38>)
 8003c12:	9107      	str	r1, [sp, #28]
 8003c14:	9104      	str	r1, [sp, #16]
 8003c16:	4909      	ldr	r1, [pc, #36]	; (8003c3c <siprintf+0x3c>)
 8003c18:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c1c:	9105      	str	r1, [sp, #20]
 8003c1e:	6800      	ldr	r0, [r0, #0]
 8003c20:	9301      	str	r3, [sp, #4]
 8003c22:	a902      	add	r1, sp, #8
 8003c24:	f000 f874 	bl	8003d10 <_svfiprintf_r>
 8003c28:	9b02      	ldr	r3, [sp, #8]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	b01c      	add	sp, #112	; 0x70
 8003c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c34:	b003      	add	sp, #12
 8003c36:	4770      	bx	lr
 8003c38:	20000040 	.word	0x20000040
 8003c3c:	ffff0208 	.word	0xffff0208

08003c40 <__malloc_lock>:
 8003c40:	4801      	ldr	r0, [pc, #4]	; (8003c48 <__malloc_lock+0x8>)
 8003c42:	f000 baf9 	b.w	8004238 <__retarget_lock_acquire_recursive>
 8003c46:	bf00      	nop
 8003c48:	200001b8 	.word	0x200001b8

08003c4c <__malloc_unlock>:
 8003c4c:	4801      	ldr	r0, [pc, #4]	; (8003c54 <__malloc_unlock+0x8>)
 8003c4e:	f000 baf4 	b.w	800423a <__retarget_lock_release_recursive>
 8003c52:	bf00      	nop
 8003c54:	200001b8 	.word	0x200001b8

08003c58 <__ssputs_r>:
 8003c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c5c:	688e      	ldr	r6, [r1, #8]
 8003c5e:	429e      	cmp	r6, r3
 8003c60:	4682      	mov	sl, r0
 8003c62:	460c      	mov	r4, r1
 8003c64:	4690      	mov	r8, r2
 8003c66:	461f      	mov	r7, r3
 8003c68:	d838      	bhi.n	8003cdc <__ssputs_r+0x84>
 8003c6a:	898a      	ldrh	r2, [r1, #12]
 8003c6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c70:	d032      	beq.n	8003cd8 <__ssputs_r+0x80>
 8003c72:	6825      	ldr	r5, [r4, #0]
 8003c74:	6909      	ldr	r1, [r1, #16]
 8003c76:	eba5 0901 	sub.w	r9, r5, r1
 8003c7a:	6965      	ldr	r5, [r4, #20]
 8003c7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c84:	3301      	adds	r3, #1
 8003c86:	444b      	add	r3, r9
 8003c88:	106d      	asrs	r5, r5, #1
 8003c8a:	429d      	cmp	r5, r3
 8003c8c:	bf38      	it	cc
 8003c8e:	461d      	movcc	r5, r3
 8003c90:	0553      	lsls	r3, r2, #21
 8003c92:	d531      	bpl.n	8003cf8 <__ssputs_r+0xa0>
 8003c94:	4629      	mov	r1, r5
 8003c96:	f7ff ff2f 	bl	8003af8 <_malloc_r>
 8003c9a:	4606      	mov	r6, r0
 8003c9c:	b950      	cbnz	r0, 8003cb4 <__ssputs_r+0x5c>
 8003c9e:	230c      	movs	r3, #12
 8003ca0:	f8ca 3000 	str.w	r3, [sl]
 8003ca4:	89a3      	ldrh	r3, [r4, #12]
 8003ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003caa:	81a3      	strh	r3, [r4, #12]
 8003cac:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb4:	6921      	ldr	r1, [r4, #16]
 8003cb6:	464a      	mov	r2, r9
 8003cb8:	f000 fac0 	bl	800423c <memcpy>
 8003cbc:	89a3      	ldrh	r3, [r4, #12]
 8003cbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc6:	81a3      	strh	r3, [r4, #12]
 8003cc8:	6126      	str	r6, [r4, #16]
 8003cca:	6165      	str	r5, [r4, #20]
 8003ccc:	444e      	add	r6, r9
 8003cce:	eba5 0509 	sub.w	r5, r5, r9
 8003cd2:	6026      	str	r6, [r4, #0]
 8003cd4:	60a5      	str	r5, [r4, #8]
 8003cd6:	463e      	mov	r6, r7
 8003cd8:	42be      	cmp	r6, r7
 8003cda:	d900      	bls.n	8003cde <__ssputs_r+0x86>
 8003cdc:	463e      	mov	r6, r7
 8003cde:	6820      	ldr	r0, [r4, #0]
 8003ce0:	4632      	mov	r2, r6
 8003ce2:	4641      	mov	r1, r8
 8003ce4:	f000 fab8 	bl	8004258 <memmove>
 8003ce8:	68a3      	ldr	r3, [r4, #8]
 8003cea:	1b9b      	subs	r3, r3, r6
 8003cec:	60a3      	str	r3, [r4, #8]
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	4433      	add	r3, r6
 8003cf2:	6023      	str	r3, [r4, #0]
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	e7db      	b.n	8003cb0 <__ssputs_r+0x58>
 8003cf8:	462a      	mov	r2, r5
 8003cfa:	f000 fac7 	bl	800428c <_realloc_r>
 8003cfe:	4606      	mov	r6, r0
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d1e1      	bne.n	8003cc8 <__ssputs_r+0x70>
 8003d04:	6921      	ldr	r1, [r4, #16]
 8003d06:	4650      	mov	r0, sl
 8003d08:	f7ff fe8a 	bl	8003a20 <_free_r>
 8003d0c:	e7c7      	b.n	8003c9e <__ssputs_r+0x46>
	...

08003d10 <_svfiprintf_r>:
 8003d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d14:	4698      	mov	r8, r3
 8003d16:	898b      	ldrh	r3, [r1, #12]
 8003d18:	061b      	lsls	r3, r3, #24
 8003d1a:	b09d      	sub	sp, #116	; 0x74
 8003d1c:	4607      	mov	r7, r0
 8003d1e:	460d      	mov	r5, r1
 8003d20:	4614      	mov	r4, r2
 8003d22:	d50e      	bpl.n	8003d42 <_svfiprintf_r+0x32>
 8003d24:	690b      	ldr	r3, [r1, #16]
 8003d26:	b963      	cbnz	r3, 8003d42 <_svfiprintf_r+0x32>
 8003d28:	2140      	movs	r1, #64	; 0x40
 8003d2a:	f7ff fee5 	bl	8003af8 <_malloc_r>
 8003d2e:	6028      	str	r0, [r5, #0]
 8003d30:	6128      	str	r0, [r5, #16]
 8003d32:	b920      	cbnz	r0, 8003d3e <_svfiprintf_r+0x2e>
 8003d34:	230c      	movs	r3, #12
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3c:	e0d1      	b.n	8003ee2 <_svfiprintf_r+0x1d2>
 8003d3e:	2340      	movs	r3, #64	; 0x40
 8003d40:	616b      	str	r3, [r5, #20]
 8003d42:	2300      	movs	r3, #0
 8003d44:	9309      	str	r3, [sp, #36]	; 0x24
 8003d46:	2320      	movs	r3, #32
 8003d48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d50:	2330      	movs	r3, #48	; 0x30
 8003d52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003efc <_svfiprintf_r+0x1ec>
 8003d56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d5a:	f04f 0901 	mov.w	r9, #1
 8003d5e:	4623      	mov	r3, r4
 8003d60:	469a      	mov	sl, r3
 8003d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d66:	b10a      	cbz	r2, 8003d6c <_svfiprintf_r+0x5c>
 8003d68:	2a25      	cmp	r2, #37	; 0x25
 8003d6a:	d1f9      	bne.n	8003d60 <_svfiprintf_r+0x50>
 8003d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8003d70:	d00b      	beq.n	8003d8a <_svfiprintf_r+0x7a>
 8003d72:	465b      	mov	r3, fp
 8003d74:	4622      	mov	r2, r4
 8003d76:	4629      	mov	r1, r5
 8003d78:	4638      	mov	r0, r7
 8003d7a:	f7ff ff6d 	bl	8003c58 <__ssputs_r>
 8003d7e:	3001      	adds	r0, #1
 8003d80:	f000 80aa 	beq.w	8003ed8 <_svfiprintf_r+0x1c8>
 8003d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d86:	445a      	add	r2, fp
 8003d88:	9209      	str	r2, [sp, #36]	; 0x24
 8003d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 80a2 	beq.w	8003ed8 <_svfiprintf_r+0x1c8>
 8003d94:	2300      	movs	r3, #0
 8003d96:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d9e:	f10a 0a01 	add.w	sl, sl, #1
 8003da2:	9304      	str	r3, [sp, #16]
 8003da4:	9307      	str	r3, [sp, #28]
 8003da6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003daa:	931a      	str	r3, [sp, #104]	; 0x68
 8003dac:	4654      	mov	r4, sl
 8003dae:	2205      	movs	r2, #5
 8003db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003db4:	4851      	ldr	r0, [pc, #324]	; (8003efc <_svfiprintf_r+0x1ec>)
 8003db6:	f7fc fa13 	bl	80001e0 <memchr>
 8003dba:	9a04      	ldr	r2, [sp, #16]
 8003dbc:	b9d8      	cbnz	r0, 8003df6 <_svfiprintf_r+0xe6>
 8003dbe:	06d0      	lsls	r0, r2, #27
 8003dc0:	bf44      	itt	mi
 8003dc2:	2320      	movmi	r3, #32
 8003dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dc8:	0711      	lsls	r1, r2, #28
 8003dca:	bf44      	itt	mi
 8003dcc:	232b      	movmi	r3, #43	; 0x2b
 8003dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8003dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8003dd8:	d015      	beq.n	8003e06 <_svfiprintf_r+0xf6>
 8003dda:	9a07      	ldr	r2, [sp, #28]
 8003ddc:	4654      	mov	r4, sl
 8003dde:	2000      	movs	r0, #0
 8003de0:	f04f 0c0a 	mov.w	ip, #10
 8003de4:	4621      	mov	r1, r4
 8003de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dea:	3b30      	subs	r3, #48	; 0x30
 8003dec:	2b09      	cmp	r3, #9
 8003dee:	d94e      	bls.n	8003e8e <_svfiprintf_r+0x17e>
 8003df0:	b1b0      	cbz	r0, 8003e20 <_svfiprintf_r+0x110>
 8003df2:	9207      	str	r2, [sp, #28]
 8003df4:	e014      	b.n	8003e20 <_svfiprintf_r+0x110>
 8003df6:	eba0 0308 	sub.w	r3, r0, r8
 8003dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	9304      	str	r3, [sp, #16]
 8003e02:	46a2      	mov	sl, r4
 8003e04:	e7d2      	b.n	8003dac <_svfiprintf_r+0x9c>
 8003e06:	9b03      	ldr	r3, [sp, #12]
 8003e08:	1d19      	adds	r1, r3, #4
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	9103      	str	r1, [sp, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	bfbb      	ittet	lt
 8003e12:	425b      	neglt	r3, r3
 8003e14:	f042 0202 	orrlt.w	r2, r2, #2
 8003e18:	9307      	strge	r3, [sp, #28]
 8003e1a:	9307      	strlt	r3, [sp, #28]
 8003e1c:	bfb8      	it	lt
 8003e1e:	9204      	strlt	r2, [sp, #16]
 8003e20:	7823      	ldrb	r3, [r4, #0]
 8003e22:	2b2e      	cmp	r3, #46	; 0x2e
 8003e24:	d10c      	bne.n	8003e40 <_svfiprintf_r+0x130>
 8003e26:	7863      	ldrb	r3, [r4, #1]
 8003e28:	2b2a      	cmp	r3, #42	; 0x2a
 8003e2a:	d135      	bne.n	8003e98 <_svfiprintf_r+0x188>
 8003e2c:	9b03      	ldr	r3, [sp, #12]
 8003e2e:	1d1a      	adds	r2, r3, #4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	9203      	str	r2, [sp, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	bfb8      	it	lt
 8003e38:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e3c:	3402      	adds	r4, #2
 8003e3e:	9305      	str	r3, [sp, #20]
 8003e40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f0c <_svfiprintf_r+0x1fc>
 8003e44:	7821      	ldrb	r1, [r4, #0]
 8003e46:	2203      	movs	r2, #3
 8003e48:	4650      	mov	r0, sl
 8003e4a:	f7fc f9c9 	bl	80001e0 <memchr>
 8003e4e:	b140      	cbz	r0, 8003e62 <_svfiprintf_r+0x152>
 8003e50:	2340      	movs	r3, #64	; 0x40
 8003e52:	eba0 000a 	sub.w	r0, r0, sl
 8003e56:	fa03 f000 	lsl.w	r0, r3, r0
 8003e5a:	9b04      	ldr	r3, [sp, #16]
 8003e5c:	4303      	orrs	r3, r0
 8003e5e:	3401      	adds	r4, #1
 8003e60:	9304      	str	r3, [sp, #16]
 8003e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e66:	4826      	ldr	r0, [pc, #152]	; (8003f00 <_svfiprintf_r+0x1f0>)
 8003e68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e6c:	2206      	movs	r2, #6
 8003e6e:	f7fc f9b7 	bl	80001e0 <memchr>
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d038      	beq.n	8003ee8 <_svfiprintf_r+0x1d8>
 8003e76:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <_svfiprintf_r+0x1f4>)
 8003e78:	bb1b      	cbnz	r3, 8003ec2 <_svfiprintf_r+0x1b2>
 8003e7a:	9b03      	ldr	r3, [sp, #12]
 8003e7c:	3307      	adds	r3, #7
 8003e7e:	f023 0307 	bic.w	r3, r3, #7
 8003e82:	3308      	adds	r3, #8
 8003e84:	9303      	str	r3, [sp, #12]
 8003e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e88:	4433      	add	r3, r6
 8003e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e8c:	e767      	b.n	8003d5e <_svfiprintf_r+0x4e>
 8003e8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e92:	460c      	mov	r4, r1
 8003e94:	2001      	movs	r0, #1
 8003e96:	e7a5      	b.n	8003de4 <_svfiprintf_r+0xd4>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	3401      	adds	r4, #1
 8003e9c:	9305      	str	r3, [sp, #20]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	f04f 0c0a 	mov.w	ip, #10
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eaa:	3a30      	subs	r2, #48	; 0x30
 8003eac:	2a09      	cmp	r2, #9
 8003eae:	d903      	bls.n	8003eb8 <_svfiprintf_r+0x1a8>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0c5      	beq.n	8003e40 <_svfiprintf_r+0x130>
 8003eb4:	9105      	str	r1, [sp, #20]
 8003eb6:	e7c3      	b.n	8003e40 <_svfiprintf_r+0x130>
 8003eb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e7f0      	b.n	8003ea4 <_svfiprintf_r+0x194>
 8003ec2:	ab03      	add	r3, sp, #12
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	462a      	mov	r2, r5
 8003ec8:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <_svfiprintf_r+0x1f8>)
 8003eca:	a904      	add	r1, sp, #16
 8003ecc:	4638      	mov	r0, r7
 8003ece:	f3af 8000 	nop.w
 8003ed2:	1c42      	adds	r2, r0, #1
 8003ed4:	4606      	mov	r6, r0
 8003ed6:	d1d6      	bne.n	8003e86 <_svfiprintf_r+0x176>
 8003ed8:	89ab      	ldrh	r3, [r5, #12]
 8003eda:	065b      	lsls	r3, r3, #25
 8003edc:	f53f af2c 	bmi.w	8003d38 <_svfiprintf_r+0x28>
 8003ee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ee2:	b01d      	add	sp, #116	; 0x74
 8003ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ee8:	ab03      	add	r3, sp, #12
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	462a      	mov	r2, r5
 8003eee:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <_svfiprintf_r+0x1f8>)
 8003ef0:	a904      	add	r1, sp, #16
 8003ef2:	4638      	mov	r0, r7
 8003ef4:	f000 f87a 	bl	8003fec <_printf_i>
 8003ef8:	e7eb      	b.n	8003ed2 <_svfiprintf_r+0x1c2>
 8003efa:	bf00      	nop
 8003efc:	08004360 	.word	0x08004360
 8003f00:	0800436a 	.word	0x0800436a
 8003f04:	00000000 	.word	0x00000000
 8003f08:	08003c59 	.word	0x08003c59
 8003f0c:	08004366 	.word	0x08004366

08003f10 <_printf_common>:
 8003f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f14:	4616      	mov	r6, r2
 8003f16:	4699      	mov	r9, r3
 8003f18:	688a      	ldr	r2, [r1, #8]
 8003f1a:	690b      	ldr	r3, [r1, #16]
 8003f1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f20:	4293      	cmp	r3, r2
 8003f22:	bfb8      	it	lt
 8003f24:	4613      	movlt	r3, r2
 8003f26:	6033      	str	r3, [r6, #0]
 8003f28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f2c:	4607      	mov	r7, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	b10a      	cbz	r2, 8003f36 <_printf_common+0x26>
 8003f32:	3301      	adds	r3, #1
 8003f34:	6033      	str	r3, [r6, #0]
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	0699      	lsls	r1, r3, #26
 8003f3a:	bf42      	ittt	mi
 8003f3c:	6833      	ldrmi	r3, [r6, #0]
 8003f3e:	3302      	addmi	r3, #2
 8003f40:	6033      	strmi	r3, [r6, #0]
 8003f42:	6825      	ldr	r5, [r4, #0]
 8003f44:	f015 0506 	ands.w	r5, r5, #6
 8003f48:	d106      	bne.n	8003f58 <_printf_common+0x48>
 8003f4a:	f104 0a19 	add.w	sl, r4, #25
 8003f4e:	68e3      	ldr	r3, [r4, #12]
 8003f50:	6832      	ldr	r2, [r6, #0]
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	42ab      	cmp	r3, r5
 8003f56:	dc26      	bgt.n	8003fa6 <_printf_common+0x96>
 8003f58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f5c:	1e13      	subs	r3, r2, #0
 8003f5e:	6822      	ldr	r2, [r4, #0]
 8003f60:	bf18      	it	ne
 8003f62:	2301      	movne	r3, #1
 8003f64:	0692      	lsls	r2, r2, #26
 8003f66:	d42b      	bmi.n	8003fc0 <_printf_common+0xb0>
 8003f68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f6c:	4649      	mov	r1, r9
 8003f6e:	4638      	mov	r0, r7
 8003f70:	47c0      	blx	r8
 8003f72:	3001      	adds	r0, #1
 8003f74:	d01e      	beq.n	8003fb4 <_printf_common+0xa4>
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	68e5      	ldr	r5, [r4, #12]
 8003f7a:	6832      	ldr	r2, [r6, #0]
 8003f7c:	f003 0306 	and.w	r3, r3, #6
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	bf08      	it	eq
 8003f84:	1aad      	subeq	r5, r5, r2
 8003f86:	68a3      	ldr	r3, [r4, #8]
 8003f88:	6922      	ldr	r2, [r4, #16]
 8003f8a:	bf0c      	ite	eq
 8003f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f90:	2500      	movne	r5, #0
 8003f92:	4293      	cmp	r3, r2
 8003f94:	bfc4      	itt	gt
 8003f96:	1a9b      	subgt	r3, r3, r2
 8003f98:	18ed      	addgt	r5, r5, r3
 8003f9a:	2600      	movs	r6, #0
 8003f9c:	341a      	adds	r4, #26
 8003f9e:	42b5      	cmp	r5, r6
 8003fa0:	d11a      	bne.n	8003fd8 <_printf_common+0xc8>
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	e008      	b.n	8003fb8 <_printf_common+0xa8>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	4652      	mov	r2, sl
 8003faa:	4649      	mov	r1, r9
 8003fac:	4638      	mov	r0, r7
 8003fae:	47c0      	blx	r8
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	d103      	bne.n	8003fbc <_printf_common+0xac>
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fbc:	3501      	adds	r5, #1
 8003fbe:	e7c6      	b.n	8003f4e <_printf_common+0x3e>
 8003fc0:	18e1      	adds	r1, r4, r3
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	2030      	movs	r0, #48	; 0x30
 8003fc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fca:	4422      	add	r2, r4
 8003fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	e7c7      	b.n	8003f68 <_printf_common+0x58>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	4622      	mov	r2, r4
 8003fdc:	4649      	mov	r1, r9
 8003fde:	4638      	mov	r0, r7
 8003fe0:	47c0      	blx	r8
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	d0e6      	beq.n	8003fb4 <_printf_common+0xa4>
 8003fe6:	3601      	adds	r6, #1
 8003fe8:	e7d9      	b.n	8003f9e <_printf_common+0x8e>
	...

08003fec <_printf_i>:
 8003fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff0:	7e0f      	ldrb	r7, [r1, #24]
 8003ff2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ff4:	2f78      	cmp	r7, #120	; 0x78
 8003ff6:	4691      	mov	r9, r2
 8003ff8:	4680      	mov	r8, r0
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	469a      	mov	sl, r3
 8003ffe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004002:	d807      	bhi.n	8004014 <_printf_i+0x28>
 8004004:	2f62      	cmp	r7, #98	; 0x62
 8004006:	d80a      	bhi.n	800401e <_printf_i+0x32>
 8004008:	2f00      	cmp	r7, #0
 800400a:	f000 80d8 	beq.w	80041be <_printf_i+0x1d2>
 800400e:	2f58      	cmp	r7, #88	; 0x58
 8004010:	f000 80a3 	beq.w	800415a <_printf_i+0x16e>
 8004014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004018:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800401c:	e03a      	b.n	8004094 <_printf_i+0xa8>
 800401e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004022:	2b15      	cmp	r3, #21
 8004024:	d8f6      	bhi.n	8004014 <_printf_i+0x28>
 8004026:	a101      	add	r1, pc, #4	; (adr r1, 800402c <_printf_i+0x40>)
 8004028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800402c:	08004085 	.word	0x08004085
 8004030:	08004099 	.word	0x08004099
 8004034:	08004015 	.word	0x08004015
 8004038:	08004015 	.word	0x08004015
 800403c:	08004015 	.word	0x08004015
 8004040:	08004015 	.word	0x08004015
 8004044:	08004099 	.word	0x08004099
 8004048:	08004015 	.word	0x08004015
 800404c:	08004015 	.word	0x08004015
 8004050:	08004015 	.word	0x08004015
 8004054:	08004015 	.word	0x08004015
 8004058:	080041a5 	.word	0x080041a5
 800405c:	080040c9 	.word	0x080040c9
 8004060:	08004187 	.word	0x08004187
 8004064:	08004015 	.word	0x08004015
 8004068:	08004015 	.word	0x08004015
 800406c:	080041c7 	.word	0x080041c7
 8004070:	08004015 	.word	0x08004015
 8004074:	080040c9 	.word	0x080040c9
 8004078:	08004015 	.word	0x08004015
 800407c:	08004015 	.word	0x08004015
 8004080:	0800418f 	.word	0x0800418f
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	1d1a      	adds	r2, r3, #4
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	602a      	str	r2, [r5, #0]
 800408c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004094:	2301      	movs	r3, #1
 8004096:	e0a3      	b.n	80041e0 <_printf_i+0x1f4>
 8004098:	6820      	ldr	r0, [r4, #0]
 800409a:	6829      	ldr	r1, [r5, #0]
 800409c:	0606      	lsls	r6, r0, #24
 800409e:	f101 0304 	add.w	r3, r1, #4
 80040a2:	d50a      	bpl.n	80040ba <_printf_i+0xce>
 80040a4:	680e      	ldr	r6, [r1, #0]
 80040a6:	602b      	str	r3, [r5, #0]
 80040a8:	2e00      	cmp	r6, #0
 80040aa:	da03      	bge.n	80040b4 <_printf_i+0xc8>
 80040ac:	232d      	movs	r3, #45	; 0x2d
 80040ae:	4276      	negs	r6, r6
 80040b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040b4:	485e      	ldr	r0, [pc, #376]	; (8004230 <_printf_i+0x244>)
 80040b6:	230a      	movs	r3, #10
 80040b8:	e019      	b.n	80040ee <_printf_i+0x102>
 80040ba:	680e      	ldr	r6, [r1, #0]
 80040bc:	602b      	str	r3, [r5, #0]
 80040be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040c2:	bf18      	it	ne
 80040c4:	b236      	sxthne	r6, r6
 80040c6:	e7ef      	b.n	80040a8 <_printf_i+0xbc>
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	6820      	ldr	r0, [r4, #0]
 80040cc:	1d19      	adds	r1, r3, #4
 80040ce:	6029      	str	r1, [r5, #0]
 80040d0:	0601      	lsls	r1, r0, #24
 80040d2:	d501      	bpl.n	80040d8 <_printf_i+0xec>
 80040d4:	681e      	ldr	r6, [r3, #0]
 80040d6:	e002      	b.n	80040de <_printf_i+0xf2>
 80040d8:	0646      	lsls	r6, r0, #25
 80040da:	d5fb      	bpl.n	80040d4 <_printf_i+0xe8>
 80040dc:	881e      	ldrh	r6, [r3, #0]
 80040de:	4854      	ldr	r0, [pc, #336]	; (8004230 <_printf_i+0x244>)
 80040e0:	2f6f      	cmp	r7, #111	; 0x6f
 80040e2:	bf0c      	ite	eq
 80040e4:	2308      	moveq	r3, #8
 80040e6:	230a      	movne	r3, #10
 80040e8:	2100      	movs	r1, #0
 80040ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040ee:	6865      	ldr	r5, [r4, #4]
 80040f0:	60a5      	str	r5, [r4, #8]
 80040f2:	2d00      	cmp	r5, #0
 80040f4:	bfa2      	ittt	ge
 80040f6:	6821      	ldrge	r1, [r4, #0]
 80040f8:	f021 0104 	bicge.w	r1, r1, #4
 80040fc:	6021      	strge	r1, [r4, #0]
 80040fe:	b90e      	cbnz	r6, 8004104 <_printf_i+0x118>
 8004100:	2d00      	cmp	r5, #0
 8004102:	d04d      	beq.n	80041a0 <_printf_i+0x1b4>
 8004104:	4615      	mov	r5, r2
 8004106:	fbb6 f1f3 	udiv	r1, r6, r3
 800410a:	fb03 6711 	mls	r7, r3, r1, r6
 800410e:	5dc7      	ldrb	r7, [r0, r7]
 8004110:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004114:	4637      	mov	r7, r6
 8004116:	42bb      	cmp	r3, r7
 8004118:	460e      	mov	r6, r1
 800411a:	d9f4      	bls.n	8004106 <_printf_i+0x11a>
 800411c:	2b08      	cmp	r3, #8
 800411e:	d10b      	bne.n	8004138 <_printf_i+0x14c>
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	07de      	lsls	r6, r3, #31
 8004124:	d508      	bpl.n	8004138 <_printf_i+0x14c>
 8004126:	6923      	ldr	r3, [r4, #16]
 8004128:	6861      	ldr	r1, [r4, #4]
 800412a:	4299      	cmp	r1, r3
 800412c:	bfde      	ittt	le
 800412e:	2330      	movle	r3, #48	; 0x30
 8004130:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004134:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004138:	1b52      	subs	r2, r2, r5
 800413a:	6122      	str	r2, [r4, #16]
 800413c:	f8cd a000 	str.w	sl, [sp]
 8004140:	464b      	mov	r3, r9
 8004142:	aa03      	add	r2, sp, #12
 8004144:	4621      	mov	r1, r4
 8004146:	4640      	mov	r0, r8
 8004148:	f7ff fee2 	bl	8003f10 <_printf_common>
 800414c:	3001      	adds	r0, #1
 800414e:	d14c      	bne.n	80041ea <_printf_i+0x1fe>
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	b004      	add	sp, #16
 8004156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800415a:	4835      	ldr	r0, [pc, #212]	; (8004230 <_printf_i+0x244>)
 800415c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004160:	6829      	ldr	r1, [r5, #0]
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	f851 6b04 	ldr.w	r6, [r1], #4
 8004168:	6029      	str	r1, [r5, #0]
 800416a:	061d      	lsls	r5, r3, #24
 800416c:	d514      	bpl.n	8004198 <_printf_i+0x1ac>
 800416e:	07df      	lsls	r7, r3, #31
 8004170:	bf44      	itt	mi
 8004172:	f043 0320 	orrmi.w	r3, r3, #32
 8004176:	6023      	strmi	r3, [r4, #0]
 8004178:	b91e      	cbnz	r6, 8004182 <_printf_i+0x196>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	f023 0320 	bic.w	r3, r3, #32
 8004180:	6023      	str	r3, [r4, #0]
 8004182:	2310      	movs	r3, #16
 8004184:	e7b0      	b.n	80040e8 <_printf_i+0xfc>
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	f043 0320 	orr.w	r3, r3, #32
 800418c:	6023      	str	r3, [r4, #0]
 800418e:	2378      	movs	r3, #120	; 0x78
 8004190:	4828      	ldr	r0, [pc, #160]	; (8004234 <_printf_i+0x248>)
 8004192:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004196:	e7e3      	b.n	8004160 <_printf_i+0x174>
 8004198:	0659      	lsls	r1, r3, #25
 800419a:	bf48      	it	mi
 800419c:	b2b6      	uxthmi	r6, r6
 800419e:	e7e6      	b.n	800416e <_printf_i+0x182>
 80041a0:	4615      	mov	r5, r2
 80041a2:	e7bb      	b.n	800411c <_printf_i+0x130>
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	6826      	ldr	r6, [r4, #0]
 80041a8:	6961      	ldr	r1, [r4, #20]
 80041aa:	1d18      	adds	r0, r3, #4
 80041ac:	6028      	str	r0, [r5, #0]
 80041ae:	0635      	lsls	r5, r6, #24
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	d501      	bpl.n	80041b8 <_printf_i+0x1cc>
 80041b4:	6019      	str	r1, [r3, #0]
 80041b6:	e002      	b.n	80041be <_printf_i+0x1d2>
 80041b8:	0670      	lsls	r0, r6, #25
 80041ba:	d5fb      	bpl.n	80041b4 <_printf_i+0x1c8>
 80041bc:	8019      	strh	r1, [r3, #0]
 80041be:	2300      	movs	r3, #0
 80041c0:	6123      	str	r3, [r4, #16]
 80041c2:	4615      	mov	r5, r2
 80041c4:	e7ba      	b.n	800413c <_printf_i+0x150>
 80041c6:	682b      	ldr	r3, [r5, #0]
 80041c8:	1d1a      	adds	r2, r3, #4
 80041ca:	602a      	str	r2, [r5, #0]
 80041cc:	681d      	ldr	r5, [r3, #0]
 80041ce:	6862      	ldr	r2, [r4, #4]
 80041d0:	2100      	movs	r1, #0
 80041d2:	4628      	mov	r0, r5
 80041d4:	f7fc f804 	bl	80001e0 <memchr>
 80041d8:	b108      	cbz	r0, 80041de <_printf_i+0x1f2>
 80041da:	1b40      	subs	r0, r0, r5
 80041dc:	6060      	str	r0, [r4, #4]
 80041de:	6863      	ldr	r3, [r4, #4]
 80041e0:	6123      	str	r3, [r4, #16]
 80041e2:	2300      	movs	r3, #0
 80041e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e8:	e7a8      	b.n	800413c <_printf_i+0x150>
 80041ea:	6923      	ldr	r3, [r4, #16]
 80041ec:	462a      	mov	r2, r5
 80041ee:	4649      	mov	r1, r9
 80041f0:	4640      	mov	r0, r8
 80041f2:	47d0      	blx	sl
 80041f4:	3001      	adds	r0, #1
 80041f6:	d0ab      	beq.n	8004150 <_printf_i+0x164>
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	079b      	lsls	r3, r3, #30
 80041fc:	d413      	bmi.n	8004226 <_printf_i+0x23a>
 80041fe:	68e0      	ldr	r0, [r4, #12]
 8004200:	9b03      	ldr	r3, [sp, #12]
 8004202:	4298      	cmp	r0, r3
 8004204:	bfb8      	it	lt
 8004206:	4618      	movlt	r0, r3
 8004208:	e7a4      	b.n	8004154 <_printf_i+0x168>
 800420a:	2301      	movs	r3, #1
 800420c:	4632      	mov	r2, r6
 800420e:	4649      	mov	r1, r9
 8004210:	4640      	mov	r0, r8
 8004212:	47d0      	blx	sl
 8004214:	3001      	adds	r0, #1
 8004216:	d09b      	beq.n	8004150 <_printf_i+0x164>
 8004218:	3501      	adds	r5, #1
 800421a:	68e3      	ldr	r3, [r4, #12]
 800421c:	9903      	ldr	r1, [sp, #12]
 800421e:	1a5b      	subs	r3, r3, r1
 8004220:	42ab      	cmp	r3, r5
 8004222:	dcf2      	bgt.n	800420a <_printf_i+0x21e>
 8004224:	e7eb      	b.n	80041fe <_printf_i+0x212>
 8004226:	2500      	movs	r5, #0
 8004228:	f104 0619 	add.w	r6, r4, #25
 800422c:	e7f5      	b.n	800421a <_printf_i+0x22e>
 800422e:	bf00      	nop
 8004230:	08004371 	.word	0x08004371
 8004234:	08004382 	.word	0x08004382

08004238 <__retarget_lock_acquire_recursive>:
 8004238:	4770      	bx	lr

0800423a <__retarget_lock_release_recursive>:
 800423a:	4770      	bx	lr

0800423c <memcpy>:
 800423c:	440a      	add	r2, r1
 800423e:	4291      	cmp	r1, r2
 8004240:	f100 33ff 	add.w	r3, r0, #4294967295
 8004244:	d100      	bne.n	8004248 <memcpy+0xc>
 8004246:	4770      	bx	lr
 8004248:	b510      	push	{r4, lr}
 800424a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800424e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004252:	4291      	cmp	r1, r2
 8004254:	d1f9      	bne.n	800424a <memcpy+0xe>
 8004256:	bd10      	pop	{r4, pc}

08004258 <memmove>:
 8004258:	4288      	cmp	r0, r1
 800425a:	b510      	push	{r4, lr}
 800425c:	eb01 0402 	add.w	r4, r1, r2
 8004260:	d902      	bls.n	8004268 <memmove+0x10>
 8004262:	4284      	cmp	r4, r0
 8004264:	4623      	mov	r3, r4
 8004266:	d807      	bhi.n	8004278 <memmove+0x20>
 8004268:	1e43      	subs	r3, r0, #1
 800426a:	42a1      	cmp	r1, r4
 800426c:	d008      	beq.n	8004280 <memmove+0x28>
 800426e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004272:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004276:	e7f8      	b.n	800426a <memmove+0x12>
 8004278:	4402      	add	r2, r0
 800427a:	4601      	mov	r1, r0
 800427c:	428a      	cmp	r2, r1
 800427e:	d100      	bne.n	8004282 <memmove+0x2a>
 8004280:	bd10      	pop	{r4, pc}
 8004282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800428a:	e7f7      	b.n	800427c <memmove+0x24>

0800428c <_realloc_r>:
 800428c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004290:	4680      	mov	r8, r0
 8004292:	4614      	mov	r4, r2
 8004294:	460e      	mov	r6, r1
 8004296:	b921      	cbnz	r1, 80042a2 <_realloc_r+0x16>
 8004298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800429c:	4611      	mov	r1, r2
 800429e:	f7ff bc2b 	b.w	8003af8 <_malloc_r>
 80042a2:	b92a      	cbnz	r2, 80042b0 <_realloc_r+0x24>
 80042a4:	f7ff fbbc 	bl	8003a20 <_free_r>
 80042a8:	4625      	mov	r5, r4
 80042aa:	4628      	mov	r0, r5
 80042ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042b0:	f000 f81b 	bl	80042ea <_malloc_usable_size_r>
 80042b4:	4284      	cmp	r4, r0
 80042b6:	4607      	mov	r7, r0
 80042b8:	d802      	bhi.n	80042c0 <_realloc_r+0x34>
 80042ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042be:	d812      	bhi.n	80042e6 <_realloc_r+0x5a>
 80042c0:	4621      	mov	r1, r4
 80042c2:	4640      	mov	r0, r8
 80042c4:	f7ff fc18 	bl	8003af8 <_malloc_r>
 80042c8:	4605      	mov	r5, r0
 80042ca:	2800      	cmp	r0, #0
 80042cc:	d0ed      	beq.n	80042aa <_realloc_r+0x1e>
 80042ce:	42bc      	cmp	r4, r7
 80042d0:	4622      	mov	r2, r4
 80042d2:	4631      	mov	r1, r6
 80042d4:	bf28      	it	cs
 80042d6:	463a      	movcs	r2, r7
 80042d8:	f7ff ffb0 	bl	800423c <memcpy>
 80042dc:	4631      	mov	r1, r6
 80042de:	4640      	mov	r0, r8
 80042e0:	f7ff fb9e 	bl	8003a20 <_free_r>
 80042e4:	e7e1      	b.n	80042aa <_realloc_r+0x1e>
 80042e6:	4635      	mov	r5, r6
 80042e8:	e7df      	b.n	80042aa <_realloc_r+0x1e>

080042ea <_malloc_usable_size_r>:
 80042ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ee:	1f18      	subs	r0, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bfbc      	itt	lt
 80042f4:	580b      	ldrlt	r3, [r1, r0]
 80042f6:	18c0      	addlt	r0, r0, r3
 80042f8:	4770      	bx	lr
	...

080042fc <_init>:
 80042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fe:	bf00      	nop
 8004300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004302:	bc08      	pop	{r3}
 8004304:	469e      	mov	lr, r3
 8004306:	4770      	bx	lr

08004308 <_fini>:
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	bf00      	nop
 800430c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430e:	bc08      	pop	{r3}
 8004310:	469e      	mov	lr, r3
 8004312:	4770      	bx	lr
